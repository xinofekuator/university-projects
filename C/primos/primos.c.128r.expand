
;; Function main (main)


;; Generating RTL for gimple basic block 2

;; argv0 ={v} &"primos"[0];

(insn 7 6 0 primos.c:21 (set (mem/f/c/i:DI (symbol_ref:DI ("argv0") [flags 0x40]  <var_decl 0x7f37dfd9b6e0 argv0>) [0 argv0+0 S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <string_cst 0x7f37dfcb6d80>)) -1 (nil))

;; if (argc <= 0)

(insn 8 7 9 primos.c:24 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 9 8 0 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 3

;; if (argc > 3)

(insn 11 10 12 primos.c:24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) -1 (nil))

(jump_insn 12 11 0 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 2 "" [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; Error (64, &"El número de argumentos no es correcto"[0]);

(insn 15 14 16 primos.c:26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <string_cst 0x7f37dfcbae60>)) -1 (nil))

(insn 16 15 17 primos.c:26 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 17 16 18 primos.c:26 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 18 17 0 primos.c:26 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 5

;; 

(code_label 19 18 20 3 "" [0 uses])

(note 20 19 0 NOTE_INSN_BASIC_BLOCK)

;; hasta = 100;

(insn 21 20 0 primos.c:29 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (const_int 100 [0x64])) -1 (nil))

;; desde = 1;

(insn 22 21 0 primos.c:30 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (const_int 1 [0x1])) -1 (nil))

;; if (argc == 2)

(insn 23 22 24 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) -1 (nil))

(jump_insn 24 23 0 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 6

;; D.3789D.3789 = argv + 8;

(insn 26 25 27 primos.c:32 (set (reg/f:DI 104)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 27 26 0 primos.c:32 (parallel [
            (set (reg/f:DI 102 [ D.3789 ])
                (plus:DI (reg/f:DI 104)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

;; D.3790D.3790 = *D.3789D.3789;

(insn 28 27 0 primos.c:32 (set (reg/f:DI 101 [ D.3790 ])
        (mem/f:DI (reg/f:DI 102 [ D.3789 ]) [0 S8 A64])) -1 (nil))

;; D.3791D.3791 = strcmp (D.3790D.3790, &"-h"[0]);

(insn 29 28 30 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <string_cst 0x7f37dfcb6e70>)) -1 (nil))

(insn 30 29 31 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 101 [ D.3790 ])) -1 (nil))

(call_insn/i 31 30 32 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 32 31 33 primos.c:32 (set (reg:SI 105)
        (reg:SI 0 ax)) -1 (nil))

(insn 33 32 34 primos.c:32 (set (reg:SI 106)
        (reg:SI 105)) -1 (nil))

(insn 34 33 0 primos.c:32 (set (reg:SI 100 [ D.3791 ])
        (reg:SI 106)) -1 (nil))

;; if (D.3791D.3791 == 0)

(insn 35 34 36 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.3791 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 36 35 0 primos.c:32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 7

;; D.3793D.3793 = argv + 8;

(insn 38 37 39 primos.c:32 (set (reg/f:DI 107)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 39 38 0 primos.c:32 (parallel [
            (set (reg/f:DI 99 [ D.3793 ])
                (plus:DI (reg/f:DI 107)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

;; D.3794D.3794 = *D.3793D.3793;

(insn 40 39 0 primos.c:32 (set (reg/f:DI 98 [ D.3794 ])
        (mem/f:DI (reg/f:DI 99 [ D.3793 ]) [0 S8 A64])) -1 (nil))

;; D.3795D.3795 = strcmp (D.3794D.3794, &"--help"[0]);

(insn 41 40 42 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <string_cst 0x7f37dfcb6ed0>)) -1 (nil))

(insn 42 41 43 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 98 [ D.3794 ])) -1 (nil))

(call_insn/i 43 42 44 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 44 43 0 primos.c:32 (set (reg:SI 97 [ D.3795 ])
        (reg:SI 0 ax)) -1 (nil))

;; if (D.3795D.3795 == 0)

(insn 45 44 46 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 97 [ D.3795 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 46 45 0 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 47 46 48 5 "" [0 uses])

(note 48 47 0 NOTE_INSN_BASIC_BLOCK)

;; stdout.0 = stdout;

(insn 49 48 0 primos.c:34 (set (reg/f:DI 96 [ stdout.0 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

;; stdout.1 = (struct FILE * restrict) stdout.0;

(insn 50 49 0 primos.c:34 (set (reg/f:DI 95 [ stdout.1 ])
        (reg/f:DI 96 [ stdout.0 ])) -1 (nil))

;; D.3798D.3798 = (const char * restrict) "primos: Uso: primos [ hasta [ desde ]]\n";

(insn 51 50 0 primos.c:34 (set (reg/f:DI 94 [ D.3798 ])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <string_cst 0x7f37dfcba8c0>)) -1 (nil))

;; __builtin_fwrite (D.3798D.3798, 1, 39, stdout.1);

(insn 52 51 53 primos.c:34 (set (reg:DI 2 cx)
        (reg/f:DI 95 [ stdout.1 ])) -1 (nil))

(insn 53 52 54 primos.c:34 (set (reg:DI 1 dx)
        (const_int 39 [0x27])) -1 (nil))

(insn 54 53 55 primos.c:34 (set (reg:DI 4 si)
        (const_int 1 [0x1])) -1 (nil))

(insn 55 54 56 primos.c:34 (set (reg:DI 5 di)
        (reg/f:DI 94 [ D.3798 ])) -1 (nil))

(call_insn 56 55 0 primos.c:34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

;; stdout.2 = stdout;

(insn 57 56 0 primos.c:35 (set (reg/f:DI 93 [ stdout.2 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

;; stdout.3 = (struct FILE * restrict) stdout.2;

(insn 58 57 0 primos.c:35 (set (reg/f:DI 92 [ stdout.3 ])
        (reg/f:DI 93 [ stdout.2 ])) -1 (nil))

;; D.3801D.3801 = (const char * restrict) "primos: Genera los números primos comprendidos en el intervalo indicado.\n";

(insn 59 58 0 primos.c:35 (set (reg/f:DI 91 [ D.3801 ])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <string_cst 0x7f37dfcb9540>)) -1 (nil))

;; __builtin_fwrite (D.3801D.3801, 1, 74, stdout.3);

(insn 60 59 61 primos.c:35 (set (reg:DI 2 cx)
        (reg/f:DI 92 [ stdout.3 ])) -1 (nil))

(insn 61 60 62 primos.c:35 (set (reg:DI 1 dx)
        (const_int 74 [0x4a])) -1 (nil))

(insn 62 61 63 primos.c:35 (set (reg:DI 4 si)
        (const_int 1 [0x1])) -1 (nil))

(insn 63 62 64 primos.c:35 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.3801 ])) -1 (nil))

(call_insn 64 63 0 primos.c:35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

;; D.3802D.3802 = 0;

(insn 65 64 0 primos.c:36 (set (reg:SI 90 [ D.3802 ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 68 67 69 4 "" [0 uses])

(note 69 68 0 NOTE_INSN_BASIC_BLOCK)

;; if (argc > 1)

(insn 70 69 71 primos.c:39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 71 70 0 primos.c:39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 10

;; D.3805D.3805 = argv + 8;

(insn 73 72 74 primos.c:41 (set (reg/f:DI 108)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 74 73 0 primos.c:41 (parallel [
            (set (reg/f:DI 89 [ D.3805 ])
                (plus:DI (reg/f:DI 108)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

;; D.3806D.3806 = *D.3805D.3805;

(insn 75 74 0 primos.c:41 (set (reg/f:DI 88 [ D.3806 ])
        (mem/f:DI (reg/f:DI 89 [ D.3805 ]) [0 S8 A64])) -1 (nil))

;; D.3807D.3807 = (const char * restrict) D.3806D.3806;

(insn 76 75 0 primos.c:41 (set (reg/f:DI 87 [ D.3807 ])
        (reg/f:DI 88 [ D.3806 ])) -1 (nil))

;; hasta.4 = strtol (D.3807D.3807, &end, 10);

(insn 77 76 78 primos.c:41 (parallel [
            (set (reg:DI 109)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 78 77 79 primos.c:41 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 79 78 80 primos.c:41 (set (reg:DI 4 si)
        (reg:DI 109)) -1 (nil))

(insn 80 79 81 primos.c:41 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.3807 ])) -1 (nil))

(call_insn 81 80 82 primos.c:41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 82 81 0 primos.c:41 (set (reg:DI 86 [ hasta.4 ])
        (reg:DI 0 ax)) -1 (nil))

;; hasta = hasta.4;

(insn 83 82 0 primos.c:41 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (reg:DI 86 [ hasta.4 ])) -1 (nil))

;; end.5 = end;

(insn 84 83 0 primos.c:42 (set (reg/f:DI 85 [ end.5 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

;; D.3812D.3812 = *end.5;

(insn 85 84 0 primos.c:42 (set (reg:QI 84 [ D.3812 ])
        (mem:QI (reg/f:DI 85 [ end.5 ]) [0 S1 A8])) -1 (nil))

;; if (D.3812D.3812 != 0)

(insn 86 85 87 primos.c:42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 84 [ D.3812 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 87 86 0 primos.c:42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 11

;; if (hasta <= 0)

(insn 89 88 90 primos.c:42 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 90 89 0 primos.c:42 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 91 90 92 8 "" [0 uses])

(note 92 91 0 NOTE_INSN_BASIC_BLOCK)

;; Error (64, &"El parámetro \"hasta\" no es un número entero positivo"[0]);

(insn 93 92 94 primos.c:44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <string_cst 0x7f37dfcb4ba0>)) -1 (nil))

(insn 94 93 95 primos.c:44 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 95 94 96 primos.c:44 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 96 95 0 primos.c:44 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 13

;; 

(code_label 97 96 98 9 "" [0 uses])

(note 98 97 0 NOTE_INSN_BASIC_BLOCK)

;; if (argc > 2)

(insn 99 98 100 primos.c:47 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) -1 (nil))

(jump_insn 100 99 0 primos.c:47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 14

;; D.3816D.3816 = argv + 16;

(insn 102 101 103 primos.c:49 (set (reg/f:DI 110)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 103 102 0 primos.c:49 (parallel [
            (set (reg/f:DI 83 [ D.3816 ])
                (plus:DI (reg/f:DI 110)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))

;; D.3817D.3817 = *D.3816D.3816;

(insn 104 103 0 primos.c:49 (set (reg/f:DI 82 [ D.3817 ])
        (mem/f:DI (reg/f:DI 83 [ D.3816 ]) [0 S8 A64])) -1 (nil))

;; D.3818D.3818 = (const char * restrict) D.3817D.3817;

(insn 105 104 0 primos.c:49 (set (reg/f:DI 81 [ D.3818 ])
        (reg/f:DI 82 [ D.3817 ])) -1 (nil))

;; desde.6 = strtol (D.3818D.3818, &end, 10);

(insn 106 105 107 primos.c:49 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 107 106 108 primos.c:49 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 108 107 109 primos.c:49 (set (reg:DI 4 si)
        (reg:DI 111)) -1 (nil))

(insn 109 108 110 primos.c:49 (set (reg:DI 5 di)
        (reg/f:DI 81 [ D.3818 ])) -1 (nil))

(call_insn 110 109 111 primos.c:49 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 111 110 0 primos.c:49 (set (reg:DI 80 [ desde.6 ])
        (reg:DI 0 ax)) -1 (nil))

;; desde = desde.6;

(insn 112 111 0 primos.c:49 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (reg:DI 80 [ desde.6 ])) -1 (nil))

;; end.7 = end;

(insn 113 112 0 primos.c:50 (set (reg/f:DI 79 [ end.7 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

;; D.3823D.3823 = *end.7;

(insn 114 113 0 primos.c:50 (set (reg:QI 78 [ D.3823 ])
        (mem:QI (reg/f:DI 79 [ end.7 ]) [0 S1 A8])) -1 (nil))

;; if (D.3823D.3823 != 0)

(insn 115 114 116 primos.c:50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 78 [ D.3823 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 116 115 0 primos.c:50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 15

;; if (desde <= 0)

(insn 118 117 119 primos.c:50 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 119 118 0 primos.c:50 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 120 119 121 10 "" [0 uses])

(note 121 120 0 NOTE_INSN_BASIC_BLOCK)

;; Error (64, &"El parámetro \"desde\" no es un número entero positivo"[0]);

(insn 122 121 123 primos.c:52 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <string_cst 0x7f37dfcb4cc0>)) -1 (nil))

(insn 123 122 124 primos.c:52 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 124 123 125 primos.c:52 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 125 124 0 primos.c:52 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 17

;; 

(code_label 126 125 127 11 "" [0 uses])

(note 127 126 0 NOTE_INSN_BASIC_BLOCK)

;; if (desde > hasta)

(insn 128 127 129 primos.c:54 (set (reg:DI 112)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])) -1 (nil))

(insn 129 128 130 primos.c:54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 112)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) -1 (nil))

(jump_insn 130 129 0 primos.c:54 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 18

;; Error (64, &"El parámetro \"desde\" ha de ser menor o igual que \"hasta\"."[0]);

(insn 132 131 133 primos.c:56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <string_cst 0x7f37dfcb4d80>)) -1 (nil))

(insn 133 132 134 primos.c:56 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 134 133 135 primos.c:56 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 135 134 0 primos.c:56 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 19

;; 

(code_label 136 135 137 7 "" [0 uses])

(note 137 136 0 NOTE_INSN_BASIC_BLOCK)

;; valEnv.8 = getenv (&"MAX_OUTPUT"[0]);

(insn 138 137 139 primos.c:61 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <string_cst 0x7f37dfcb1540>)) -1 (nil))

(call_insn 139 138 140 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f37dfd7e200 getenv>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 140 139 0 primos.c:61 (set (reg/f:DI 77 [ valEnv.8 ])
        (reg:DI 0 ax)) -1 (nil))

;; valEnv = valEnv.8;

(insn 141 140 0 primos.c:61 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
        (reg/f:DI 77 [ valEnv.8 ])) -1 (nil))

;; if (valEnv == 0B)

(insn 142 141 143 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 143 142 0 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 20

;; D.3831D.3831 = *valEnv;

(insn 145 144 146 primos.c:61 (set (reg/f:DI 113)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) -1 (nil))

(insn 146 145 0 primos.c:61 (set (reg:QI 76 [ D.3831 ])
        (mem:QI (reg/f:DI 113) [0 S1 A8])) -1 (nil))

;; if (D.3831D.3831 == 0)

(insn 147 146 148 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 76 [ D.3831 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 148 147 0 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 21

;; valEnv.9 = (const char * restrict) valEnv;

(insn 150 149 0 primos.c:61 (set (reg/f:DI 75 [ valEnv.9 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) -1 (nil))

;; max.10 = strtol (valEnv.9, &end, 10);

(insn 151 150 152 primos.c:61 (parallel [
            (set (reg:DI 114)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 152 151 153 primos.c:61 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 153 152 154 primos.c:61 (set (reg:DI 4 si)
        (reg:DI 114)) -1 (nil))

(insn 154 153 155 primos.c:61 (set (reg:DI 5 di)
        (reg/f:DI 75 [ valEnv.9 ])) -1 (nil))

(call_insn 155 154 156 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 156 155 0 primos.c:61 (set (reg:DI 74 [ max.10 ])
        (reg:DI 0 ax)) -1 (nil))

;; max = max.10;

(insn 157 156 0 primos.c:61 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (reg:DI 74 [ max.10 ])) -1 (nil))

;; if (max < 0)

(insn 158 157 159 primos.c:61 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 159 158 0 primos.c:61 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 22

;; end.11 = end;

(insn 161 160 0 primos.c:61 (set (reg/f:DI 73 [ end.11 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

;; D.3837D.3837 = *end.11;

(insn 162 161 0 primos.c:61 (set (reg:QI 72 [ D.3837 ])
        (mem:QI (reg/f:DI 73 [ end.11 ]) [0 S1 A8])) -1 (nil))

;; if (D.3837D.3837 != 0)

(insn 163 162 164 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 72 [ D.3837 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 164 163 0 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 23

;; 

(code_label 165 164 166 12 "" [0 uses])

(note 166 165 0 NOTE_INSN_BASIC_BLOCK)

;; max = 100;

(insn 167 166 0 primos.c:63 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (const_int 100 [0x64])) -1 (nil))

;; Generating RTL for gimple basic block 24

;; 

(code_label 168 167 169 13 "" [0 uses])

(note 169 168 0 NOTE_INSN_BASIC_BLOCK)

;; size = 1;

(insn 170 169 0 primos.c:66 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
        (const_int 1 [0x1])) -1 (nil))

;; D.3838D.3838 = malloc (8);

(insn 171 170 172 primos.c:67 (set (reg:DI 5 di)
        (const_int 8 [0x8])) -1 (nil))

(call_insn 172 171 173 primos.c:67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f37e0052700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 173 172 174 primos.c:67 (set (reg/f:DI 115)
        (reg:DI 0 ax)) -1 (expr_list:REG_NOALIAS (reg/f:DI 115)
        (nil)))

(insn 174 173 0 primos.c:67 (set (reg/f:DI 71 [ D.3838 ])
        (reg/f:DI 115)) -1 (nil))

;; primos = (long int * *) D.3838D.3838;

(insn 175 174 0 primos.c:67 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 71 [ D.3838 ])) -1 (nil))

;; i = 2;

(insn 176 175 0 primos.c:68 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
        (const_int 2 [0x2])) -1 (nil))

;; Generating RTL for gimple basic block 25

;; D.3839D.3839 = esPrimo (i, size, primos);

(insn 180 179 181 primos.c:70 (set (reg:DI 116)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) -1 (nil))

(insn 181 180 182 primos.c:70 (set (reg:SI 117)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 182 181 183 primos.c:70 (set (reg:DI 118)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 183 182 184 primos.c:70 (set (reg:DI 1 dx)
        (reg:DI 116)) -1 (nil))

(insn 184 183 185 primos.c:70 (set (reg:SI 4 si)
        (reg:SI 117)) -1 (nil))

(insn 185 184 186 primos.c:70 (set (reg:DI 5 di)
        (reg:DI 118)) -1 (nil))

(call_insn 186 185 187 primos.c:70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("esPrimo") [flags 0x3]  <function_decl 0x7f37dfe16e00 esPrimo>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (nil)))))

(insn 187 186 0 primos.c:70 (set (reg:SI 70 [ D.3839 ])
        (reg:SI 0 ax)) -1 (nil))

;; if (D.3839D.3839 == 0)

(insn 188 187 189 primos.c:70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.3839 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 189 188 0 primos.c:70 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 26

;; if (size > 1)

(insn 191 190 192 primos.c:72 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 192 191 0 primos.c:72 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 27

;; D.3844D.3844 = size + 1;

(insn 194 193 195 primos.c:74 (set (reg:SI 119)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 195 194 0 primos.c:74 (parallel [
            (set (reg:SI 69 [ D.3844 ])
                (plus:SI (reg:SI 119)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

;; D.3845D.3845 = (long unsigned int) D.3844D.3844;

(insn 196 195 0 primos.c:74 (set (reg:DI 68 [ D.3845 ])
        (sign_extend:DI (reg:SI 69 [ D.3844 ]))) -1 (nil))

;; D.3846D.3846 = D.3845D.3845 * 8;

(insn 197 196 0 primos.c:74 (parallel [
            (set (reg:DI 67 [ D.3846 ])
                (ashift:DI (reg:DI 68 [ D.3845 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3847D.3847 = realloc (primos, D.3846D.3846);

(insn 198 197 199 primos.c:74 (set (reg:DI 120)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) -1 (nil))

(insn 199 198 200 primos.c:74 (set (reg:DI 4 si)
        (reg:DI 67 [ D.3846 ])) -1 (nil))

(insn 200 199 201 primos.c:74 (set (reg:DI 5 di)
        (reg:DI 120)) -1 (nil))

(call_insn 201 200 202 primos.c:74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f37e0054300 realloc>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 202 201 0 primos.c:74 (set (reg/f:DI 66 [ D.3847 ])
        (reg:DI 0 ax)) -1 (nil))

;; primos = (long int * *) D.3847D.3847;

(insn 203 202 0 primos.c:74 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 66 [ D.3847 ])) -1 (nil))

;; if (primos != 0B)

(insn 204 203 205 primos.c:74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 205 204 0 primos.c:74 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 28

;; size = size + 1;

(insn 207 206 0 primos.c:76 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; Generating RTL for gimple basic block 29

;; 

(code_label 210 209 211 17 "" [0 uses])

(note 211 210 0 NOTE_INSN_BASIC_BLOCK)

;; Error (71, &"No se pudo ubicar la memoria dinámica necesaria."[0]);

(insn 212 211 213 primos.c:80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <string_cst 0x7f37dfcb4f60>)) -1 (nil))

(insn 213 212 214 primos.c:80 (set (reg:SI 5 di)
        (const_int 71 [0x47])) -1 (nil))

(insn 214 213 215 primos.c:80 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 215 214 0 primos.c:80 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 30

;; 

(code_label 216 215 217 16 "" [0 uses])

(note 217 216 0 NOTE_INSN_BASIC_BLOCK)

;; D.3851D.3851 = (long unsigned int) size;

(insn 218 217 219 primos.c:83 (set (reg:SI 121)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 219 218 0 primos.c:83 (set (reg:DI 65 [ D.3851 ])
        (sign_extend:DI (reg:SI 121))) -1 (nil))

;; D.3852D.3852 = D.3851D.3851 + -1;

(insn 220 219 0 primos.c:83 (parallel [
            (set (reg:DI 64 [ D.3852 ])
                (plus:DI (reg:DI 65 [ D.3851 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3853D.3853 = D.3852D.3852 * 8;

(insn 221 220 0 primos.c:83 (parallel [
            (set (reg:DI 63 [ D.3853 ])
                (ashift:DI (reg:DI 64 [ D.3852 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3854D.3854 = primos + D.3853D.3853;

(insn 222 221 0 primos.c:83 (parallel [
            (set (reg/f:DI 62 [ D.3854 ])
                (plus:DI (reg:DI 63 [ D.3853 ])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3855D.3855 = *D.3854D.3854;

(insn 223 222 0 primos.c:83 (set (reg/f:DI 61 [ D.3855 ])
        (mem/f:DI (reg/f:DI 62 [ D.3854 ]) [0 S8 A64])) -1 (nil))

;; *D.3855D.3855 ={v} i;

(insn 224 223 225 primos.c:83 (set (reg:DI 122)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 225 224 0 primos.c:83 (set (mem:DI (reg/f:DI 61 [ D.3855 ]) [0 S8 A64])
        (reg:DI 122)) -1 (nil))

;; if (i >= desde)

(insn 226 225 227 primos.c:84 (set (reg:DI 123)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 227 226 228 primos.c:84 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 123)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64]))) -1 (nil))

(jump_insn 228 227 0 primos.c:84 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 31

;; D.3858D.3858 = (const char * restrict) "\t %ld\n";

(insn 230 229 0 primos.c:86 (set (reg/f:DI 60 [ D.3858 ])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <string_cst 0x7f37dfcb17b0>)) -1 (nil))

;; stdout.12 = stdout;

(insn 231 230 0 primos.c:86 (set (reg/f:DI 59 [ stdout.12 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

;; stdout.13 = (struct FILE * restrict) stdout.12;

(insn 232 231 0 primos.c:86 (set (reg/f:DI 58 [ stdout.13 ])
        (reg/f:DI 59 [ stdout.12 ])) -1 (nil))

;; fprintf (stdout.13, D.3858D.3858, i);

(insn 233 232 234 primos.c:86 (set (reg:DI 124)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 234 233 235 primos.c:86 (set (reg:DI 1 dx)
        (reg:DI 124)) -1 (nil))

(insn 235 234 236 primos.c:86 (set (reg:DI 4 si)
        (reg/f:DI 60 [ D.3858 ])) -1 (nil))

(insn 236 235 237 primos.c:86 (set (reg:DI 5 di)
        (reg/f:DI 58 [ stdout.13 ])) -1 (nil))

(insn 237 236 238 primos.c:86 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 238 237 0 primos.c:86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f37e002da00 fprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

;; Generating RTL for gimple basic block 32

;; 

(code_label 241 240 242 15 "" [0 uses])

(note 242 241 0 NOTE_INSN_BASIC_BLOCK)

;; Error (77, &"Se intentó superar el límite de salida establecido por MAX_OUTPUT."[0]);

(insn 243 242 244 primos.c:91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <string_cst 0x7f37dfcb94d0>)) -1 (nil))

(insn 244 243 245 primos.c:91 (set (reg:SI 5 di)
        (const_int 77 [0x4d])) -1 (nil))

(insn 245 244 246 primos.c:91 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 246 245 0 primos.c:91 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))

;; Generating RTL for gimple basic block 33

;; 

(code_label 247 246 248 18 "" [0 uses])

(note 248 247 0 NOTE_INSN_BASIC_BLOCK)

;; i = i + 1;

(insn 249 248 0 primos.c:68 (parallel [
            (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                (plus:DI (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; Generating RTL for gimple basic block 34

;; 

(code_label 250 249 251 14 "" [0 uses])

(note 251 250 0 NOTE_INSN_BASIC_BLOCK)

;; if (i <= hasta)

(insn 253 251 254 primos.c:68 (set (reg:DI 125)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 254 253 255 primos.c:68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 125)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) -1 (nil))

(jump_insn 255 254 0 primos.c:68 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 252)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 35

;; D.3802D.3802 = 0;

(insn 257 256 0 primos.c:94 (set (reg:SI 90 [ D.3802 ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 36

;; 

(code_label 258 257 259 6 "" [0 uses])

(note 259 258 0 NOTE_INSN_BASIC_BLOCK)

;; return D.3802D.3802;

(insn 260 259 261 primos.c:94 (set (reg:SI 103 [ <result> ])
        (reg:SI 90 [ D.3802 ])) -1 (nil))

(jump_insn 261 260 262 primos.c:94 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 262 261 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 primos.c:8 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) -1 (nil))

(insn 3 2 4 2 primos.c:8 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 primos.c:21 (set (mem/f/c/i:DI (symbol_ref:DI ("argv0") [flags 0x40]  <var_decl 0x7f37dfd9b6e0 argv0>) [0 argv0+0 S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <string_cst 0x7f37dfcb6d80>)) -1 (nil))

(insn 8 7 9 3 primos.c:24 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 9 8 10 3 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) -1 (nil))
;; End of basic block 3 -> ( 5 4)

;; Succ edge  5
;; Succ edge  4 (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 (fallthru)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 4 primos.c:24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) -1 (nil))

(jump_insn 12 11 13 4 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) -1 (nil))
;; End of basic block 4 -> ( 5 6)

;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 13 12 14 5 2 "" [1 uses])

(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 5 primos.c:26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <string_cst 0x7f37dfcbae60>)) -1 (nil))

(insn 16 15 17 5 primos.c:26 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 17 16 18 5 primos.c:26 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 18 17 19 5 primos.c:26 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4
;; Pred edge  5 (fallthru)
(code_label 19 18 20 6 3 "" [1 uses])

(note 20 19 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 6 primos.c:29 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (const_int 100 [0x64])) -1 (nil))

(insn 22 21 23 6 primos.c:30 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (const_int 1 [0x1])) -1 (nil))

(insn 23 22 24 6 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) -1 (nil))

(jump_insn 24 23 25 6 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) -1 (nil))
;; End of basic block 6 -> ( 7 10)

;; Succ edge  7 (fallthru)
;; Succ edge  10

;; Start of basic block ( 6) -> 7
;; Pred edge  6 (fallthru)
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 7 primos.c:32 (set (reg/f:DI 104)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 27 26 28 7 primos.c:32 (parallel [
            (set (reg/f:DI 102 [ D.3789 ])
                (plus:DI (reg/f:DI 104)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 28 27 29 7 primos.c:32 (set (reg/f:DI 101 [ D.3790 ])
        (mem/f:DI (reg/f:DI 102 [ D.3789 ]) [0 S8 A64])) -1 (nil))

(insn 29 28 30 7 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <string_cst 0x7f37dfcb6e70>)) -1 (nil))

(insn 30 29 31 7 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 101 [ D.3790 ])) -1 (nil))

(call_insn/i 31 30 32 7 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 32 31 33 7 primos.c:32 (set (reg:SI 105)
        (reg:SI 0 ax)) -1 (nil))

(insn 33 32 34 7 primos.c:32 (set (reg:SI 106)
        (reg:SI 105)) -1 (nil))

(insn 34 33 35 7 primos.c:32 (set (reg:SI 100 [ D.3791 ])
        (reg:SI 106)) -1 (nil))

(insn 35 34 36 7 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ D.3791 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 36 35 37 7 primos.c:32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) -1 (nil))
;; End of basic block 7 -> ( 9 8)

;; Succ edge  9
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; Pred edge  7 (fallthru)
(note 37 36 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 8 primos.c:32 (set (reg/f:DI 107)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 39 38 40 8 primos.c:32 (parallel [
            (set (reg/f:DI 99 [ D.3793 ])
                (plus:DI (reg/f:DI 107)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 40 39 41 8 primos.c:32 (set (reg/f:DI 98 [ D.3794 ])
        (mem/f:DI (reg/f:DI 99 [ D.3793 ]) [0 S8 A64])) -1 (nil))

(insn 41 40 42 8 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <string_cst 0x7f37dfcb6ed0>)) -1 (nil))

(insn 42 41 43 8 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 98 [ D.3794 ])) -1 (nil))

(call_insn/i 43 42 44 8 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 44 43 45 8 primos.c:32 (set (reg:SI 97 [ D.3795 ])
        (reg:SI 0 ax)) -1 (nil))

(insn 45 44 46 8 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 97 [ D.3795 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 46 45 47 8 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) -1 (nil))
;; End of basic block 8 -> ( 9 10)

;; Succ edge  9 (fallthru)
;; Succ edge  10

;; Start of basic block ( 7 8) -> 9
;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 47 46 48 9 5 "" [1 uses])

(note 48 47 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 9 primos.c:34 (set (reg/f:DI 96 [ stdout.0 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

(insn 50 49 51 9 primos.c:34 (set (reg/f:DI 95 [ stdout.1 ])
        (reg/f:DI 96 [ stdout.0 ])) -1 (nil))

(insn 51 50 52 9 primos.c:34 (set (reg/f:DI 94 [ D.3798 ])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <string_cst 0x7f37dfcba8c0>)) -1 (nil))

(insn 52 51 53 9 primos.c:34 (set (reg:DI 2 cx)
        (reg/f:DI 95 [ stdout.1 ])) -1 (nil))

(insn 53 52 54 9 primos.c:34 (set (reg:DI 1 dx)
        (const_int 39 [0x27])) -1 (nil))

(insn 54 53 55 9 primos.c:34 (set (reg:DI 4 si)
        (const_int 1 [0x1])) -1 (nil))

(insn 55 54 56 9 primos.c:34 (set (reg:DI 5 di)
        (reg/f:DI 94 [ D.3798 ])) -1 (nil))

(call_insn 56 55 57 9 primos.c:34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(insn 57 56 58 9 primos.c:35 (set (reg/f:DI 93 [ stdout.2 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

(insn 58 57 59 9 primos.c:35 (set (reg/f:DI 92 [ stdout.3 ])
        (reg/f:DI 93 [ stdout.2 ])) -1 (nil))

(insn 59 58 60 9 primos.c:35 (set (reg/f:DI 91 [ D.3801 ])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <string_cst 0x7f37dfcb9540>)) -1 (nil))

(insn 60 59 61 9 primos.c:35 (set (reg:DI 2 cx)
        (reg/f:DI 92 [ stdout.3 ])) -1 (nil))

(insn 61 60 62 9 primos.c:35 (set (reg:DI 1 dx)
        (const_int 74 [0x4a])) -1 (nil))

(insn 62 61 63 9 primos.c:35 (set (reg:DI 4 si)
        (const_int 1 [0x1])) -1 (nil))

(insn 63 62 64 9 primos.c:35 (set (reg:DI 5 di)
        (reg/f:DI 91 [ D.3801 ])) -1 (nil))

(call_insn 64 63 65 9 primos.c:35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(insn 65 64 66 9 primos.c:36 (set (reg:SI 90 [ D.3802 ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 66 65 67 9 primos.c:36 (set (pc)
        (label_ref 258)) -1 (nil))
;; End of basic block 9 -> ( 37)

;; Succ edge  37

(barrier 67 66 68)

;; Start of basic block ( 6 8) -> 10
;; Pred edge  6
;; Pred edge  8
(code_label 68 67 69 10 4 "" [2 uses])

(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 10 primos.c:39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 71 70 72 10 primos.c:39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) -1 (nil))
;; End of basic block 10 -> ( 11 20)

;; Succ edge  11 (fallthru)
;; Succ edge  20

;; Start of basic block ( 10) -> 11
;; Pred edge  10 (fallthru)
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 73 72 74 11 primos.c:41 (set (reg/f:DI 108)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 74 73 75 11 primos.c:41 (parallel [
            (set (reg/f:DI 89 [ D.3805 ])
                (plus:DI (reg/f:DI 108)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 75 74 76 11 primos.c:41 (set (reg/f:DI 88 [ D.3806 ])
        (mem/f:DI (reg/f:DI 89 [ D.3805 ]) [0 S8 A64])) -1 (nil))

(insn 76 75 77 11 primos.c:41 (set (reg/f:DI 87 [ D.3807 ])
        (reg/f:DI 88 [ D.3806 ])) -1 (nil))

(insn 77 76 78 11 primos.c:41 (parallel [
            (set (reg:DI 109)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 78 77 79 11 primos.c:41 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 79 78 80 11 primos.c:41 (set (reg:DI 4 si)
        (reg:DI 109)) -1 (nil))

(insn 80 79 81 11 primos.c:41 (set (reg:DI 5 di)
        (reg/f:DI 87 [ D.3807 ])) -1 (nil))

(call_insn 81 80 82 11 primos.c:41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 82 81 83 11 primos.c:41 (set (reg:DI 86 [ hasta.4 ])
        (reg:DI 0 ax)) -1 (nil))

(insn 83 82 84 11 primos.c:41 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (reg:DI 86 [ hasta.4 ])) -1 (nil))

(insn 84 83 85 11 primos.c:42 (set (reg/f:DI 85 [ end.5 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

(insn 85 84 86 11 primos.c:42 (set (reg:QI 84 [ D.3812 ])
        (mem:QI (reg/f:DI 85 [ end.5 ]) [0 S1 A8])) -1 (nil))

(insn 86 85 87 11 primos.c:42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 84 [ D.3812 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 87 86 88 11 primos.c:42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) -1 (nil))
;; End of basic block 11 -> ( 13 12)

;; Succ edge  13
;; Succ edge  12 (fallthru)

;; Start of basic block ( 11) -> 12
;; Pred edge  11 (fallthru)
(note 88 87 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 12 primos.c:42 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 90 89 91 12 primos.c:42 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 97)
            (pc))) -1 (nil))
;; End of basic block 12 -> ( 13 14)

;; Succ edge  13 (fallthru)
;; Succ edge  14

;; Start of basic block ( 11 12) -> 13
;; Pred edge  11
;; Pred edge  12 (fallthru)
(code_label 91 90 92 13 8 "" [1 uses])

(note 92 91 93 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 94 13 primos.c:44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <string_cst 0x7f37dfcb4ba0>)) -1 (nil))

(insn 94 93 95 13 primos.c:44 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 95 94 96 13 primos.c:44 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 96 95 97 13 primos.c:44 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 13 -> ( 14)

;; Succ edge  14 (fallthru)

;; Start of basic block ( 12 13) -> 14
;; Pred edge  12
;; Pred edge  13 (fallthru)
(code_label 97 96 98 14 9 "" [1 uses])

(note 98 97 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 100 14 primos.c:47 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) -1 (nil))

(jump_insn 100 99 101 14 primos.c:47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) -1 (nil))
;; End of basic block 14 -> ( 15 20)

;; Succ edge  15 (fallthru)
;; Succ edge  20

;; Start of basic block ( 14) -> 15
;; Pred edge  14 (fallthru)
(note 101 100 102 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 103 15 primos.c:49 (set (reg/f:DI 110)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) -1 (nil))

(insn 103 102 104 15 primos.c:49 (parallel [
            (set (reg/f:DI 83 [ D.3816 ])
                (plus:DI (reg/f:DI 110)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 104 103 105 15 primos.c:49 (set (reg/f:DI 82 [ D.3817 ])
        (mem/f:DI (reg/f:DI 83 [ D.3816 ]) [0 S8 A64])) -1 (nil))

(insn 105 104 106 15 primos.c:49 (set (reg/f:DI 81 [ D.3818 ])
        (reg/f:DI 82 [ D.3817 ])) -1 (nil))

(insn 106 105 107 15 primos.c:49 (parallel [
            (set (reg:DI 111)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 107 106 108 15 primos.c:49 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 108 107 109 15 primos.c:49 (set (reg:DI 4 si)
        (reg:DI 111)) -1 (nil))

(insn 109 108 110 15 primos.c:49 (set (reg:DI 5 di)
        (reg/f:DI 81 [ D.3818 ])) -1 (nil))

(call_insn 110 109 111 15 primos.c:49 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 111 110 112 15 primos.c:49 (set (reg:DI 80 [ desde.6 ])
        (reg:DI 0 ax)) -1 (nil))

(insn 112 111 113 15 primos.c:49 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (reg:DI 80 [ desde.6 ])) -1 (nil))

(insn 113 112 114 15 primos.c:50 (set (reg/f:DI 79 [ end.7 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

(insn 114 113 115 15 primos.c:50 (set (reg:QI 78 [ D.3823 ])
        (mem:QI (reg/f:DI 79 [ end.7 ]) [0 S1 A8])) -1 (nil))

(insn 115 114 116 15 primos.c:50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 78 [ D.3823 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 116 115 117 15 primos.c:50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) -1 (nil))
;; End of basic block 15 -> ( 17 16)

;; Succ edge  17
;; Succ edge  16 (fallthru)

;; Start of basic block ( 15) -> 16
;; Pred edge  15 (fallthru)
(note 117 116 118 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 16 primos.c:50 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 119 118 120 16 primos.c:50 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 126)
            (pc))) -1 (nil))
;; End of basic block 16 -> ( 17 18)

;; Succ edge  17 (fallthru)
;; Succ edge  18

;; Start of basic block ( 15 16) -> 17
;; Pred edge  15
;; Pred edge  16 (fallthru)
(code_label 120 119 121 17 10 "" [1 uses])

(note 121 120 122 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 17 primos.c:52 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <string_cst 0x7f37dfcb4cc0>)) -1 (nil))

(insn 123 122 124 17 primos.c:52 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 124 123 125 17 primos.c:52 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 125 124 126 17 primos.c:52 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 17 -> ( 18)

;; Succ edge  18 (fallthru)

;; Start of basic block ( 16 17) -> 18
;; Pred edge  16
;; Pred edge  17 (fallthru)
(code_label 126 125 127 18 11 "" [1 uses])

(note 127 126 128 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 128 127 129 18 primos.c:54 (set (reg:DI 112)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])) -1 (nil))

(insn 129 128 130 18 primos.c:54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 112)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) -1 (nil))

(jump_insn 130 129 131 18 primos.c:54 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) -1 (nil))
;; End of basic block 18 -> ( 19 20)

;; Succ edge  19 (fallthru)
;; Succ edge  20

;; Start of basic block ( 18) -> 19
;; Pred edge  18 (fallthru)
(note 131 130 132 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 19 primos.c:56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <string_cst 0x7f37dfcb4d80>)) -1 (nil))

(insn 133 132 134 19 primos.c:56 (set (reg:SI 5 di)
        (const_int 64 [0x40])) -1 (nil))

(insn 134 133 135 19 primos.c:56 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 135 134 136 19 primos.c:56 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 19 -> ( 20)

;; Succ edge  20 (fallthru)

;; Start of basic block ( 10 14 18 19) -> 20
;; Pred edge  10
;; Pred edge  14
;; Pred edge  18
;; Pred edge  19 (fallthru)
(code_label 136 135 137 20 7 "" [3 uses])

(note 137 136 138 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 139 20 primos.c:61 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <string_cst 0x7f37dfcb1540>)) -1 (nil))

(call_insn 139 138 140 20 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f37dfd7e200 getenv>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 140 139 141 20 primos.c:61 (set (reg/f:DI 77 [ valEnv.8 ])
        (reg:DI 0 ax)) -1 (nil))

(insn 141 140 142 20 primos.c:61 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
        (reg/f:DI 77 [ valEnv.8 ])) -1 (nil))

(insn 142 141 143 20 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 143 142 144 20 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) -1 (nil))
;; End of basic block 20 -> ( 24 21)

;; Succ edge  24
;; Succ edge  21 (fallthru)

;; Start of basic block ( 20) -> 21
;; Pred edge  20 (fallthru)
(note 144 143 145 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 145 144 146 21 primos.c:61 (set (reg/f:DI 113)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) -1 (nil))

(insn 146 145 147 21 primos.c:61 (set (reg:QI 76 [ D.3831 ])
        (mem:QI (reg/f:DI 113) [0 S1 A8])) -1 (nil))

(insn 147 146 148 21 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 76 [ D.3831 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 148 147 149 21 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) -1 (nil))
;; End of basic block 21 -> ( 24 22)

;; Succ edge  24
;; Succ edge  22 (fallthru)

;; Start of basic block ( 21) -> 22
;; Pred edge  21 (fallthru)
(note 149 148 150 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 150 149 151 22 primos.c:61 (set (reg/f:DI 75 [ valEnv.9 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) -1 (nil))

(insn 151 150 152 22 primos.c:61 (parallel [
            (set (reg:DI 114)
                (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 152 151 153 22 primos.c:61 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) -1 (nil))

(insn 153 152 154 22 primos.c:61 (set (reg:DI 4 si)
        (reg:DI 114)) -1 (nil))

(insn 154 153 155 22 primos.c:61 (set (reg:DI 5 di)
        (reg/f:DI 75 [ valEnv.9 ])) -1 (nil))

(call_insn 155 154 156 22 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 156 155 157 22 primos.c:61 (set (reg:DI 74 [ max.10 ])
        (reg:DI 0 ax)) -1 (nil))

(insn 157 156 158 22 primos.c:61 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (reg:DI 74 [ max.10 ])) -1 (nil))

(insn 158 157 159 22 primos.c:61 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 159 158 160 22 primos.c:61 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) -1 (nil))
;; End of basic block 22 -> ( 24 23)

;; Succ edge  24
;; Succ edge  23 (fallthru)

;; Start of basic block ( 22) -> 23
;; Pred edge  22 (fallthru)
(note 160 159 161 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 23 primos.c:61 (set (reg/f:DI 73 [ end.11 ])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) -1 (nil))

(insn 162 161 163 23 primos.c:61 (set (reg:QI 72 [ D.3837 ])
        (mem:QI (reg/f:DI 73 [ end.11 ]) [0 S1 A8])) -1 (nil))

(insn 163 162 164 23 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 72 [ D.3837 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 164 163 165 23 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) -1 (nil))
;; End of basic block 23 -> ( 24 25)

;; Succ edge  24 (fallthru)
;; Succ edge  25

;; Start of basic block ( 20 21 22 23) -> 24
;; Pred edge  20
;; Pred edge  21
;; Pred edge  22
;; Pred edge  23 (fallthru)
(code_label 165 164 166 24 12 "" [3 uses])

(note 166 165 167 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 167 166 168 24 primos.c:63 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (const_int 100 [0x64])) -1 (nil))
;; End of basic block 24 -> ( 25)

;; Succ edge  25 (fallthru)

;; Start of basic block ( 23 24) -> 25
;; Pred edge  23
;; Pred edge  24 (fallthru)
(code_label 168 167 169 25 13 "" [1 uses])

(note 169 168 170 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 170 169 171 25 primos.c:66 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
        (const_int 1 [0x1])) -1 (nil))

(insn 171 170 172 25 primos.c:67 (set (reg:DI 5 di)
        (const_int 8 [0x8])) -1 (nil))

(call_insn 172 171 173 25 primos.c:67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f37e0052700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 173 172 174 25 primos.c:67 (set (reg/f:DI 115)
        (reg:DI 0 ax)) -1 (expr_list:REG_NOALIAS (reg/f:DI 115)
        (nil)))

(insn 174 173 175 25 primos.c:67 (set (reg/f:DI 71 [ D.3838 ])
        (reg/f:DI 115)) -1 (nil))

(insn 175 174 176 25 primos.c:67 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 71 [ D.3838 ])) -1 (nil))

(insn 176 175 177 25 primos.c:68 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
        (const_int 2 [0x2])) -1 (nil))

(jump_insn 177 176 178 25 primos.c:68 (set (pc)
        (label_ref 250)) -1 (nil))
;; End of basic block 25 -> ( 35)

;; Succ edge  35

(barrier 178 177 252)

;; Start of basic block ( 35) -> 26
;; Pred edge  35
(code_label 252 178 179 26 19 "" [1 uses])

(note 179 252 180 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 180 179 181 26 primos.c:70 (set (reg:DI 116)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) -1 (nil))

(insn 181 180 182 26 primos.c:70 (set (reg:SI 117)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 182 181 183 26 primos.c:70 (set (reg:DI 118)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 183 182 184 26 primos.c:70 (set (reg:DI 1 dx)
        (reg:DI 116)) -1 (nil))

(insn 184 183 185 26 primos.c:70 (set (reg:SI 4 si)
        (reg:SI 117)) -1 (nil))

(insn 185 184 186 26 primos.c:70 (set (reg:DI 5 di)
        (reg:DI 118)) -1 (nil))

(call_insn 186 185 187 26 primos.c:70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("esPrimo") [flags 0x3]  <function_decl 0x7f37dfe16e00 esPrimo>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (nil)))))

(insn 187 186 188 26 primos.c:70 (set (reg:SI 70 [ D.3839 ])
        (reg:SI 0 ax)) -1 (nil))

(insn 188 187 189 26 primos.c:70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 70 [ D.3839 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 189 188 190 26 primos.c:70 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) -1 (nil))
;; End of basic block 26 -> ( 27 33)

;; Succ edge  27 (fallthru)
;; Succ edge  33

;; Start of basic block ( 26) -> 27
;; Pred edge  26 (fallthru)
(note 190 189 191 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 191 190 192 27 primos.c:72 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 192 191 193 27 primos.c:72 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 216)
            (pc))) -1 (nil))
;; End of basic block 27 -> ( 28 31)

;; Succ edge  28 (fallthru)
;; Succ edge  31

;; Start of basic block ( 27) -> 28
;; Pred edge  27 (fallthru)
(note 193 192 194 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 28 primos.c:74 (set (reg:SI 119)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 195 194 196 28 primos.c:74 (parallel [
            (set (reg:SI 69 [ D.3844 ])
                (plus:SI (reg:SI 119)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 196 195 197 28 primos.c:74 (set (reg:DI 68 [ D.3845 ])
        (sign_extend:DI (reg:SI 69 [ D.3844 ]))) -1 (nil))

(insn 197 196 198 28 primos.c:74 (parallel [
            (set (reg:DI 67 [ D.3846 ])
                (ashift:DI (reg:DI 68 [ D.3845 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 198 197 199 28 primos.c:74 (set (reg:DI 120)
        (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) -1 (nil))

(insn 199 198 200 28 primos.c:74 (set (reg:DI 4 si)
        (reg:DI 67 [ D.3846 ])) -1 (nil))

(insn 200 199 201 28 primos.c:74 (set (reg:DI 5 di)
        (reg:DI 120)) -1 (nil))

(call_insn 201 200 202 28 primos.c:74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f37e0054300 realloc>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 202 201 203 28 primos.c:74 (set (reg/f:DI 66 [ D.3847 ])
        (reg:DI 0 ax)) -1 (nil))

(insn 203 202 204 28 primos.c:74 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 66 [ D.3847 ])) -1 (nil))

(insn 204 203 205 28 primos.c:74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 205 204 206 28 primos.c:74 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 210)
            (pc))) -1 (nil))
;; End of basic block 28 -> ( 29 30)

;; Succ edge  29 (fallthru)
;; Succ edge  30

;; Start of basic block ( 28) -> 29
;; Pred edge  28 (fallthru)
(note 206 205 207 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 207 206 208 29 primos.c:76 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(jump_insn 208 207 209 29 primos.c:76 (set (pc)
        (label_ref 216)) -1 (nil))
;; End of basic block 29 -> ( 31)

;; Succ edge  31

(barrier 209 208 210)

;; Start of basic block ( 28) -> 30
;; Pred edge  28
(code_label 210 209 211 30 17 "" [1 uses])

(note 211 210 212 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 212 211 213 30 primos.c:80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <string_cst 0x7f37dfcb4f60>)) -1 (nil))

(insn 213 212 214 30 primos.c:80 (set (reg:SI 5 di)
        (const_int 71 [0x47])) -1 (nil))

(insn 214 213 215 30 primos.c:80 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 215 214 216 30 primos.c:80 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 30 -> ( 31)

;; Succ edge  31 (fallthru)

;; Start of basic block ( 27 29 30) -> 31
;; Pred edge  27
;; Pred edge  29
;; Pred edge  30 (fallthru)
(code_label 216 215 217 31 16 "" [2 uses])

(note 217 216 218 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 218 217 219 31 primos.c:83 (set (reg:SI 121)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) -1 (nil))

(insn 219 218 220 31 primos.c:83 (set (reg:DI 65 [ D.3851 ])
        (sign_extend:DI (reg:SI 121))) -1 (nil))

(insn 220 219 221 31 primos.c:83 (parallel [
            (set (reg:DI 64 [ D.3852 ])
                (plus:DI (reg:DI 65 [ D.3851 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 221 220 222 31 primos.c:83 (parallel [
            (set (reg:DI 63 [ D.3853 ])
                (ashift:DI (reg:DI 64 [ D.3852 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 222 221 223 31 primos.c:83 (parallel [
            (set (reg/f:DI 62 [ D.3854 ])
                (plus:DI (reg:DI 63 [ D.3853 ])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 223 222 224 31 primos.c:83 (set (reg/f:DI 61 [ D.3855 ])
        (mem/f:DI (reg/f:DI 62 [ D.3854 ]) [0 S8 A64])) -1 (nil))

(insn 224 223 225 31 primos.c:83 (set (reg:DI 122)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 225 224 226 31 primos.c:83 (set (mem:DI (reg/f:DI 61 [ D.3855 ]) [0 S8 A64])
        (reg:DI 122)) -1 (nil))

(insn 226 225 227 31 primos.c:84 (set (reg:DI 123)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 227 226 228 31 primos.c:84 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 123)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64]))) -1 (nil))

(jump_insn 228 227 229 31 primos.c:84 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 247)
            (pc))) -1 (nil))
;; End of basic block 31 -> ( 32 34)

;; Succ edge  32 (fallthru)
;; Succ edge  34

;; Start of basic block ( 31) -> 32
;; Pred edge  31 (fallthru)
(note 229 228 230 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 230 229 231 32 primos.c:86 (set (reg/f:DI 60 [ D.3858 ])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <string_cst 0x7f37dfcb17b0>)) -1 (nil))

(insn 231 230 232 32 primos.c:86 (set (reg/f:DI 59 [ stdout.12 ])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) -1 (nil))

(insn 232 231 233 32 primos.c:86 (set (reg/f:DI 58 [ stdout.13 ])
        (reg/f:DI 59 [ stdout.12 ])) -1 (nil))

(insn 233 232 234 32 primos.c:86 (set (reg:DI 124)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 234 233 235 32 primos.c:86 (set (reg:DI 1 dx)
        (reg:DI 124)) -1 (nil))

(insn 235 234 236 32 primos.c:86 (set (reg:DI 4 si)
        (reg/f:DI 60 [ D.3858 ])) -1 (nil))

(insn 236 235 237 32 primos.c:86 (set (reg:DI 5 di)
        (reg/f:DI 58 [ stdout.13 ])) -1 (nil))

(insn 237 236 238 32 primos.c:86 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 238 237 239 32 primos.c:86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f37e002da00 fprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(jump_insn 239 238 240 32 primos.c:86 (set (pc)
        (label_ref 247)) -1 (nil))
;; End of basic block 32 -> ( 34)

;; Succ edge  34

(barrier 240 239 241)

;; Start of basic block ( 26) -> 33
;; Pred edge  26
(code_label 241 240 242 33 15 "" [1 uses])

(note 242 241 243 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 243 242 244 33 primos.c:91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <string_cst 0x7f37dfcb94d0>)) -1 (nil))

(insn 244 243 245 33 primos.c:91 (set (reg:SI 5 di)
        (const_int 77 [0x4d])) -1 (nil))

(insn 245 244 246 33 primos.c:91 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 246 245 247 33 primos.c:91 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 33 -> ( 34)

;; Succ edge  34 (fallthru)

;; Start of basic block ( 32 33 31) -> 34
;; Pred edge  32
;; Pred edge  33 (fallthru)
;; Pred edge  31
(code_label 247 246 248 34 18 "" [2 uses])

(note 248 247 249 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 249 248 250 34 primos.c:68 (parallel [
            (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                (plus:DI (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))
;; End of basic block 34 -> ( 35)

;; Succ edge  35 (fallthru)

;; Start of basic block ( 25 34) -> 35
;; Pred edge  25
;; Pred edge  34 (fallthru)
(code_label 250 249 251 35 14 "" [1 uses])

(note 251 250 253 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 253 251 254 35 primos.c:68 (set (reg:DI 125)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) -1 (nil))

(insn 254 253 255 35 primos.c:68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 125)
            (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) -1 (nil))

(jump_insn 255 254 256 35 primos.c:68 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 252)
            (pc))) -1 (nil))
;; End of basic block 35 -> ( 26 36)

;; Succ edge  26
;; Succ edge  36 (fallthru)

;; Start of basic block ( 35) -> 36
;; Pred edge  35 (fallthru)
(note 256 255 257 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 257 256 258 36 primos.c:94 (set (reg:SI 90 [ D.3802 ])
        (const_int 0 [0x0])) -1 (nil))
;; End of basic block 36 -> ( 37)

;; Succ edge  37 (fallthru)

;; Start of basic block ( 9 36) -> 37
;; Pred edge  9
;; Pred edge  36 (fallthru)
(code_label 258 257 259 37 6 "" [1 uses])

(note 259 258 260 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 261 37 primos.c:94 (set (reg:SI 103 [ <result> ])
        (reg:SI 90 [ D.3802 ])) -1 (nil))

(jump_insn 261 260 262 37 primos.c:94 (set (pc)
        (label_ref 263)) -1 (nil))
;; End of basic block 37 -> ( 39)

;; Succ edge  39

(barrier 262 261 271)

;; Start of basic block () -> 38
(note 271 262 265 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 265 271 266 38 primos.c:95 (clobber (reg/i:SI 0 ax)) -1 (nil))

(insn 266 265 267 38 primos.c:95 (clobber (reg:SI 103 [ <result> ])) -1 (nil))

(jump_insn 267 266 268 38 primos.c:95 (set (pc)
        (label_ref 269)) -1 (nil))
;; End of basic block 38 -> ( 40)

;; Succ edge  40

(barrier 268 267 263)

;; Start of basic block ( 37) -> 39
;; Pred edge  37
(code_label 263 268 272 39 1 "" [1 uses])

(note 272 263 264 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 264 272 269 39 primos.c:95 (set (reg/i:SI 0 ax)
        (reg:SI 103 [ <result> ])) -1 (nil))
;; End of basic block 39 -> ( 40)

;; Succ edge  40 (fallthru)

;; Start of basic block ( 38 39) -> 40
;; Pred edge  38
;; Pred edge  39 (fallthru)
(code_label 269 264 273 40 20 "" [1 uses])

(note 273 269 270 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 270 273 0 40 primos.c:95 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 40 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function esPrimo (esPrimo)


;; Generating RTL for gimple basic block 2

;; resultado = 0;

(insn 8 7 0 primos.c:103 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 0 [0x0])) -1 (nil))

;; i = 0;

(insn 9 8 0 primos.c:104 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 3

;; D.3872D.3872 = (long unsigned int) i;

(insn 13 12 14 primos.c:106 (set (reg:SI 67)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) -1 (nil))

(insn 14 13 0 primos.c:106 (set (reg:DI 65 [ D.3872 ])
        (sign_extend:DI (reg:SI 67))) -1 (nil))

;; D.3873D.3873 = D.3872D.3872 * 8;

(insn 15 14 0 primos.c:106 (parallel [
            (set (reg:DI 64 [ D.3873 ])
                (ashift:DI (reg:DI 65 [ D.3872 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3874D.3874 = array + D.3873D.3873;

(insn 16 15 0 primos.c:106 (parallel [
            (set (reg/f:DI 63 [ D.3874 ])
                (plus:DI (reg:DI 64 [ D.3873 ])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -40 [0xffffffffffffffd8])) [0 array+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; D.3875D.3875 = *D.3874D.3874;

(insn 17 16 0 primos.c:106 (set (reg/f:DI 62 [ D.3875 ])
        (mem/f:DI (reg/f:DI 63 [ D.3874 ]) [0 S8 A64])) -1 (nil))

;; D.3876D.3876 = *D.3875D.3875;

(insn 18 17 0 primos.c:106 (set (reg:DI 61 [ D.3876 ])
        (mem:DI (reg/f:DI 62 [ D.3875 ]) [0 S8 A64])) -1 (nil))

;; D.3877D.3877 = num % D.3876D.3876;

(insn 19 18 20 primos.c:106 (set (reg:DI 68)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 num+0 S8 A64])) -1 (nil))

(insn 20 19 21 primos.c:106 (parallel [
            (set (reg:DI 70)
                (div:DI (reg:DI 68)
                    (reg:DI 61 [ D.3876 ])))
            (set (reg:DI 69)
                (mod:DI (reg:DI 68)
                    (reg:DI 61 [ D.3876 ])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 21 20 0 primos.c:106 (set (reg:DI 60 [ D.3877 ])
        (reg:DI 69)) -1 (nil))

;; if (D.3877D.3877 == 0)

(insn 22 21 23 primos.c:106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 60 [ D.3877 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 0 primos.c:106 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 4

;; resultado = 1;

(insn 25 24 0 primos.c:108 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 1 [0x1])) -1 (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 26 25 27 23 "" [0 uses])

(note 27 26 0 NOTE_INSN_BASIC_BLOCK)

;; i = i + 1;

(insn 28 27 0 primos.c:104 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 29 28 30 22 "" [0 uses])

(note 30 29 0 NOTE_INSN_BASIC_BLOCK)

;; D.3880D.3880 = size + -1;

(insn 31 30 32 primos.c:104 (set (reg:SI 71)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) -1 (nil))

(insn 32 31 0 primos.c:104 (parallel [
            (set (reg:SI 59 [ D.3880 ])
                (plus:SI (reg:SI 71)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

;; if (D.3880D.3880 >= i)

(insn 33 32 34 primos.c:104 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 59 [ D.3880 ])
            (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) -1 (nil))

(jump_insn 34 33 0 primos.c:104 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 7

;; if (size != 1)

(insn 37 35 38 primos.c:104 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 38 37 0 primos.c:104 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) -1 (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 39 38 40 24 "" [0 uses])

(note 40 39 0 NOTE_INSN_BASIC_BLOCK)

;; D.3882D.3882 = resultado;

(insn 41 40 0 primos.c:111 (set (reg:SI 58 [ D.3882 ])
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])) -1 (nil))

;; return D.3882D.3882;

(insn 42 41 43 primos.c:111 (set (reg:SI 66 [ <result> ])
        (reg:SI 58 [ D.3882 ])) -1 (nil))

(jump_insn 43 42 44 primos.c:111 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 44 43 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 primos.c:99 (set (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 num+0 S8 A64])
        (reg:DI 5 di [ num ])) -1 (nil))

(insn 3 2 4 2 primos.c:99 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) -1 (nil))

(insn 4 3 5 2 primos.c:99 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [0 array+0 S8 A64])
        (reg:DI 1 dx [ array ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 primos.c:103 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 0 [0x0])) -1 (nil))

(insn 9 8 10 3 primos.c:104 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 10 9 11 3 primos.c:104 (set (pc)
        (label_ref 29)) -1 (nil))
;; End of basic block 3 -> ( 7)

;; Succ edge  7

(barrier 11 10 36)

;; Start of basic block ( 8) -> 4
;; Pred edge  8
(code_label 36 11 12 4 25 "" [1 uses])

(note 12 36 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 primos.c:106 (set (reg:SI 67)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) -1 (nil))

(insn 14 13 15 4 primos.c:106 (set (reg:DI 65 [ D.3872 ])
        (sign_extend:DI (reg:SI 67))) -1 (nil))

(insn 15 14 16 4 primos.c:106 (parallel [
            (set (reg:DI 64 [ D.3873 ])
                (ashift:DI (reg:DI 65 [ D.3872 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 16 15 17 4 primos.c:106 (parallel [
            (set (reg/f:DI 63 [ D.3874 ])
                (plus:DI (reg:DI 64 [ D.3873 ])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -40 [0xffffffffffffffd8])) [0 array+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 17 16 18 4 primos.c:106 (set (reg/f:DI 62 [ D.3875 ])
        (mem/f:DI (reg/f:DI 63 [ D.3874 ]) [0 S8 A64])) -1 (nil))

(insn 18 17 19 4 primos.c:106 (set (reg:DI 61 [ D.3876 ])
        (mem:DI (reg/f:DI 62 [ D.3875 ]) [0 S8 A64])) -1 (nil))

(insn 19 18 20 4 primos.c:106 (set (reg:DI 68)
        (mem/c/i:DI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 num+0 S8 A64])) -1 (nil))

(insn 20 19 21 4 primos.c:106 (parallel [
            (set (reg:DI 70)
                (div:DI (reg:DI 68)
                    (reg:DI 61 [ D.3876 ])))
            (set (reg:DI 69)
                (mod:DI (reg:DI 68)
                    (reg:DI 61 [ D.3876 ])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))

(insn 21 20 22 4 primos.c:106 (set (reg:DI 60 [ D.3877 ])
        (reg:DI 69)) -1 (nil))

(insn 22 21 23 4 primos.c:106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 60 [ D.3877 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 24 4 primos.c:106 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) -1 (nil))
;; End of basic block 4 -> ( 5 6)

;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; Pred edge  4 (fallthru)
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 5 primos.c:108 (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 1 [0x1])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4
;; Pred edge  5 (fallthru)
(code_label 26 25 27 6 23 "" [1 uses])

(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 6 primos.c:104 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) -1 (nil))
;; End of basic block 6 -> ( 7)

;; Succ edge  7 (fallthru)

;; Start of basic block ( 3 6) -> 7
;; Pred edge  3
;; Pred edge  6 (fallthru)
(code_label 29 28 30 7 22 "" [1 uses])

(note 30 29 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 7 primos.c:104 (set (reg:SI 71)
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) -1 (nil))

(insn 32 31 33 7 primos.c:104 (parallel [
            (set (reg:SI 59 [ D.3880 ])
                (plus:SI (reg:SI 71)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) -1 (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 33 32 34 7 primos.c:104 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 59 [ D.3880 ])
            (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) -1 (nil))

(jump_insn 34 33 35 7 primos.c:104 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) -1 (nil))
;; End of basic block 7 -> ( 8 9)

;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; Pred edge  7 (fallthru)
(note 35 34 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 38 8 primos.c:104 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) -1 (nil))

(jump_insn 38 37 39 8 primos.c:104 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) -1 (nil))
;; End of basic block 8 -> ( 4 9)

;; Succ edge  4
;; Succ edge  9 (fallthru)

;; Start of basic block ( 7 8) -> 9
;; Pred edge  7
;; Pred edge  8 (fallthru)
(code_label 39 38 40 9 24 "" [1 uses])

(note 40 39 41 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 9 primos.c:111 (set (reg:SI 58 [ D.3882 ])
        (mem/c/i:SI (plus:DI (reg/f:DI 54 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])) -1 (nil))

(insn 42 41 43 9 primos.c:111 (set (reg:SI 66 [ <result> ])
        (reg:SI 58 [ D.3882 ])) -1 (nil))

(jump_insn 43 42 44 9 primos.c:111 (set (pc)
        (label_ref 45)) -1 (nil))
;; End of basic block 9 -> ( 11)

;; Succ edge  11

(barrier 44 43 53)

;; Start of basic block () -> 10
(note 53 44 47 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 47 53 48 10 primos.c:112 (clobber (reg/i:SI 0 ax)) -1 (nil))

(insn 48 47 49 10 primos.c:112 (clobber (reg:SI 66 [ <result> ])) -1 (nil))

(jump_insn 49 48 50 10 primos.c:112 (set (pc)
        (label_ref 51)) -1 (nil))
;; End of basic block 10 -> ( 12)

;; Succ edge  12

(barrier 50 49 45)

;; Start of basic block ( 9) -> 11
;; Pred edge  9
(code_label 45 50 54 11 21 "" [1 uses])

(note 54 45 46 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 46 54 51 11 primos.c:112 (set (reg/i:SI 0 ax)
        (reg:SI 66 [ <result> ])) -1 (nil))
;; End of basic block 11 -> ( 12)

;; Succ edge  12 (fallthru)

;; Start of basic block ( 10 11) -> 12
;; Pred edge  10
;; Pred edge  11 (fallthru)
(code_label 51 46 55 12 26 "" [1 uses])

(note 55 51 52 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 52 55 0 12 primos.c:112 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 12 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)

