
;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 37 n_edges 57 count 37 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r125: preferred GENERAL_REGS, alternative NO_REGS
    a2 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred DREG, alternative GENERAL_REGS
    a5 (r124,l0) best DREG, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS
    a7 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS
    a9 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS
    a14 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred DIREG, alternative GENERAL_REGS
    a16 (r120,l0) best DIREG, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS
    a20 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS
    a22 (r118,l0) best DIREG, cover GENERAL_REGS
    r117: preferred SIREG, alternative GENERAL_REGS
    a23 (r117,l0) best SIREG, cover GENERAL_REGS
    r116: preferred DREG, alternative GENERAL_REGS
    a24 (r116,l0) best DREG, cover GENERAL_REGS
    r115: preferred AREG, alternative GENERAL_REGS
    a26 (r115,l0) best AREG, cover GENERAL_REGS
    r114: preferred SIREG, alternative GENERAL_REGS
    a31 (r114,l0) best SIREG, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS
    a33 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS
    a35 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred SIREG, alternative GENERAL_REGS
    a40 (r111,l0) best SIREG, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS
    a43 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred SIREG, alternative GENERAL_REGS
    a48 (r109,l0) best SIREG, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS
    a51 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS
    a61 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS
    a63 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS
    a64 (r105,l0) best AREG, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS
    a67 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS
    a0 (r103,l0) best AREG, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS
    a66 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS
    a65 (r101,l0) best DIREG, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS
    a62 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS
    a60 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS
    a59 (r98,l0) best DIREG, cover GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS
    a58 (r97,l0) best AREG, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS
    a57 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred CREG, alternative GENERAL_REGS
    a56 (r95,l0) best CREG, cover GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS
    a55 (r94,l0) best DIREG, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS
    a54 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred CREG, alternative GENERAL_REGS
    a53 (r92,l0) best CREG, cover GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS
    a52 (r91,l0) best DIREG, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS
    a50 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS
    a49 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS
    a47 (r87,l0) best DIREG, cover GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS
    a46 (r86,l0) best AREG, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS
    a45 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS
    a44 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS
    a42 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS
    a41 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred DIREG, alternative GENERAL_REGS
    a39 (r81,l0) best DIREG, cover GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS
    a38 (r80,l0) best AREG, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS
    a37 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS
    a36 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS
    a34 (r77,l0) best AREG, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS
    a32 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred DIREG, alternative GENERAL_REGS
    a30 (r75,l0) best DIREG, cover GENERAL_REGS
    r74: preferred AREG, alternative GENERAL_REGS
    a29 (r74,l0) best AREG, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS
    a28 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS
    a27 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS
    a25 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred AREG, alternative GENERAL_REGS
    a21 (r70,l0) best AREG, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS
    a19 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS
    a18 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred SIREG, alternative GENERAL_REGS
    a17 (r67,l0) best SIREG, cover GENERAL_REGS
    r66: preferred AREG, alternative GENERAL_REGS
    a15 (r66,l0) best AREG, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS
    a13 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS
    a12 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS
    a11 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS
    a10 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS
    a8 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred SIREG, alternative GENERAL_REGS
    a4 (r60,l0) best SIREG, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS
    a6 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred DIREG, alternative GENERAL_REGS
    a3 (r58,l0) best DIREG, cover GENERAL_REGS

  a0(r103,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a2(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a3(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r124,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a7(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a8(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a10(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a11(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a13(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a14(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a15(r66,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a16(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a18(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a20(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r70,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a22(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a23(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a24(r116,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a25(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a26(r115,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a29(r74,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a30(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a31(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a32(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a34(r77,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a35(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a36(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a38(r80,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a39(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a40(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a41(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a42(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a43(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a44(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a45(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a46(r86,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a47(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a48(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a49(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a50(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a51(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a52(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a53(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a54(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a55(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a56(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a57(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a58(r97,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a59(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a60(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a61(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a62(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a63(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a64(r105,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a65(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a66(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a67(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 270(l0): point = 0
   Insn 264(l0): point = 2
   Insn 260(l0): point = 4
   Insn 257(l0): point = 7
   Insn 255(l0): point = 10
   Insn 254(l0): point = 12
   Insn 253(l0): point = 14
   Insn 249(l0): point = 17
   Insn 246(l0): point = 20
   Insn 245(l0): point = 22
   Insn 244(l0): point = 24
   Insn 243(l0): point = 26
   Insn 280(l0): point = 29
   Insn 238(l0): point = 31
   Insn 237(l0): point = 33
   Insn 236(l0): point = 35
   Insn 235(l0): point = 37
   Insn 234(l0): point = 39
   Insn 233(l0): point = 41
   Insn 232(l0): point = 43
   Insn 231(l0): point = 45
   Insn 230(l0): point = 47
   Insn 228(l0): point = 50
   Insn 227(l0): point = 52
   Insn 226(l0): point = 54
   Insn 225(l0): point = 56
   Insn 224(l0): point = 58
   Insn 223(l0): point = 60
   Insn 222(l0): point = 62
   Insn 221(l0): point = 64
   Insn 220(l0): point = 66
   Insn 219(l0): point = 68
   Insn 218(l0): point = 70
   Insn 215(l0): point = 73
   Insn 214(l0): point = 75
   Insn 213(l0): point = 77
   Insn 212(l0): point = 79
   Insn 278(l0): point = 82
   Insn 207(l0): point = 84
   Insn 205(l0): point = 87
   Insn 204(l0): point = 89
   Insn 203(l0): point = 91
   Insn 202(l0): point = 93
   Insn 201(l0): point = 95
   Insn 200(l0): point = 97
   Insn 199(l0): point = 99
   Insn 198(l0): point = 101
   Insn 197(l0): point = 103
   Insn 196(l0): point = 105
   Insn 195(l0): point = 107
   Insn 194(l0): point = 109
   Insn 192(l0): point = 112
   Insn 191(l0): point = 114
   Insn 189(l0): point = 117
   Insn 188(l0): point = 119
   Insn 187(l0): point = 121
   Insn 186(l0): point = 123
   Insn 185(l0): point = 125
   Insn 184(l0): point = 127
   Insn 183(l0): point = 129
   Insn 182(l0): point = 131
   Insn 181(l0): point = 133
   Insn 180(l0): point = 135
   Insn 276(l0): point = 138
   Insn 176(l0): point = 140
   Insn 175(l0): point = 142
   Insn 174(l0): point = 144
   Insn 173(l0): point = 146
   Insn 172(l0): point = 148
   Insn 171(l0): point = 150
   Insn 170(l0): point = 152
   Insn 167(l0): point = 155
   Insn 164(l0): point = 158
   Insn 163(l0): point = 160
   Insn 162(l0): point = 162
   Insn 161(l0): point = 164
   Insn 159(l0): point = 167
   Insn 158(l0): point = 169
   Insn 157(l0): point = 171
   Insn 156(l0): point = 173
   Insn 155(l0): point = 175
   Insn 154(l0): point = 177
   Insn 153(l0): point = 179
   Insn 152(l0): point = 181
   Insn 151(l0): point = 183
   Insn 150(l0): point = 185
   Insn 148(l0): point = 188
   Insn 147(l0): point = 190
   Insn 146(l0): point = 192
   Insn 145(l0): point = 194
   Insn 143(l0): point = 197
   Insn 142(l0): point = 199
   Insn 141(l0): point = 201
   Insn 140(l0): point = 203
   Insn 139(l0): point = 205
   Insn 138(l0): point = 207
   Insn 135(l0): point = 210
   Insn 134(l0): point = 212
   Insn 133(l0): point = 214
   Insn 132(l0): point = 216
   Insn 130(l0): point = 219
   Insn 129(l0): point = 221
   Insn 128(l0): point = 223
   Insn 125(l0): point = 226
   Insn 124(l0): point = 228
   Insn 123(l0): point = 230
   Insn 122(l0): point = 232
   Insn 119(l0): point = 235
   Insn 118(l0): point = 237
   Insn 116(l0): point = 240
   Insn 115(l0): point = 242
   Insn 114(l0): point = 244
   Insn 113(l0): point = 246
   Insn 112(l0): point = 248
   Insn 111(l0): point = 250
   Insn 110(l0): point = 252
   Insn 109(l0): point = 254
   Insn 108(l0): point = 256
   Insn 107(l0): point = 258
   Insn 106(l0): point = 260
   Insn 105(l0): point = 262
   Insn 104(l0): point = 264
   Insn 103(l0): point = 266
   Insn 102(l0): point = 268
   Insn 100(l0): point = 271
   Insn 99(l0): point = 273
   Insn 96(l0): point = 276
   Insn 95(l0): point = 278
   Insn 94(l0): point = 280
   Insn 93(l0): point = 282
   Insn 90(l0): point = 285
   Insn 89(l0): point = 287
   Insn 87(l0): point = 290
   Insn 86(l0): point = 292
   Insn 85(l0): point = 294
   Insn 84(l0): point = 296
   Insn 83(l0): point = 298
   Insn 82(l0): point = 300
   Insn 81(l0): point = 302
   Insn 80(l0): point = 304
   Insn 79(l0): point = 306
   Insn 78(l0): point = 308
   Insn 77(l0): point = 310
   Insn 76(l0): point = 312
   Insn 75(l0): point = 314
   Insn 74(l0): point = 316
   Insn 73(l0): point = 318
   Insn 71(l0): point = 321
   Insn 70(l0): point = 323
   Insn 274(l0): point = 326
   Insn 65(l0): point = 328
   Insn 64(l0): point = 330
   Insn 63(l0): point = 332
   Insn 62(l0): point = 334
   Insn 61(l0): point = 336
   Insn 60(l0): point = 338
   Insn 59(l0): point = 340
   Insn 58(l0): point = 342
   Insn 57(l0): point = 344
   Insn 56(l0): point = 346
   Insn 55(l0): point = 348
   Insn 54(l0): point = 350
   Insn 53(l0): point = 352
   Insn 52(l0): point = 354
   Insn 51(l0): point = 356
   Insn 50(l0): point = 358
   Insn 49(l0): point = 360
   Insn 46(l0): point = 363
   Insn 45(l0): point = 365
   Insn 44(l0): point = 367
   Insn 43(l0): point = 369
   Insn 42(l0): point = 371
   Insn 41(l0): point = 373
   Insn 40(l0): point = 375
   Insn 39(l0): point = 377
   Insn 38(l0): point = 379
   Insn 36(l0): point = 382
   Insn 35(l0): point = 384
   Insn 34(l0): point = 386
   Insn 33(l0): point = 388
   Insn 32(l0): point = 390
   Insn 31(l0): point = 392
   Insn 30(l0): point = 394
   Insn 29(l0): point = 396
   Insn 28(l0): point = 398
   Insn 27(l0): point = 400
   Insn 26(l0): point = 402
   Insn 24(l0): point = 405
   Insn 23(l0): point = 407
   Insn 22(l0): point = 409
   Insn 21(l0): point = 411
   Insn 18(l0): point = 414
   Insn 17(l0): point = 416
   Insn 16(l0): point = 418
   Insn 15(l0): point = 420
   Insn 12(l0): point = 423
   Insn 11(l0): point = 425
   Insn 9(l0): point = 428
   Insn 8(l0): point = 430
   Insn 7(l0): point = 432
   Insn 3(l0): point = 434
   Insn 2(l0): point = 436
 a0(r103): [3..4]
 a1(r90): [326..328] [5..7]
 a2(r125): [13..14]
 a3(r58): [36..43]
 a4(r60): [38..47]
 a5(r124): [40..41]
 a6(r59): [44..45]
 a7(r123): [53..54]
 a8(r61): [57..60]
 a9(r122): [57..58]
 a10(r62): [61..62]
 a11(r63): [63..64]
 a12(r64): [65..66]
 a13(r65): [67..68]
 a14(r121): [69..70]
 a15(r66): [92..93]
 a16(r120): [98..101]
 a17(r67): [100..103]
 a18(r68): [104..105]
 a19(r69): [106..107]
 a20(r119): [108..109]
 a21(r70): [120..121]
 a22(r118): [126..131]
 a23(r117): [128..133]
 a24(r116): [130..135]
 a25(r71): [143..144]
 a26(r115): [145..146]
 a27(r72): [161..162]
 a28(r73): [163..164]
 a29(r74): [172..173]
 a30(r75): [178..185]
 a31(r114): [180..183]
 a32(r76): [191..192]
 a33(r113): [193..194]
 a34(r77): [202..203]
 a35(r112): [222..223]
 a36(r78): [243..244]
 a37(r79): [245..246]
 a38(r80): [249..250]
 a39(r81): [255..262]
 a40(r111): [257..260]
 a41(r82): [263..264]
 a42(r83): [265..266]
 a43(r110): [267..268]
 a44(r84): [293..294]
 a45(r85): [295..296]
 a46(r86): [299..300]
 a47(r87): [305..312]
 a48(r109): [307..310]
 a49(r88): [313..314]
 a50(r89): [315..316]
 a51(r108): [317..318]
 a52(r91): [333..340]
 a53(r92): [339..342]
 a54(r93): [343..344]
 a55(r94): [349..356]
 a56(r95): [355..358]
 a57(r96): [359..360]
 a58(r97): [366..367]
 a59(r98): [372..375]
 a60(r99): [376..377]
 a61(r107): [378..379]
 a62(r100): [385..386]
 a63(r106): [387..388]
 a64(r105): [389..390]
 a65(r101): [395..398]
 a66(r102): [399..400]
 a67(r104): [401..402]
Compressing live ranges: from 439 to 137 - 31%
Ranges after the compression:
 a0(r103): [0..1]
 a1(r90): [103..104] [2..3]
 a2(r125): [4..5]
 a3(r58): [6..10]
 a4(r60): [7..13]
 a5(r124): [8..9]
 a6(r59): [11..12]
 a7(r123): [14..15]
 a8(r61): [16..18]
 a9(r122): [16..17]
 a10(r62): [19..20]
 a11(r63): [21..22]
 a12(r64): [23..24]
 a13(r65): [25..26]
 a14(r121): [27..28]
 a15(r66): [29..30]
 a16(r120): [31..33]
 a17(r67): [32..34]
 a18(r68): [35..36]
 a19(r69): [37..38]
 a20(r119): [39..40]
 a21(r70): [41..42]
 a22(r118): [43..46]
 a23(r117): [44..47]
 a24(r116): [45..48]
 a25(r71): [49..50]
 a26(r115): [51..52]
 a27(r72): [53..54]
 a28(r73): [55..56]
 a29(r74): [57..58]
 a30(r75): [59..62]
 a31(r114): [60..61]
 a32(r76): [63..64]
 a33(r113): [65..66]
 a34(r77): [67..68]
 a35(r112): [69..70]
 a36(r78): [71..72]
 a37(r79): [73..74]
 a38(r80): [75..76]
 a39(r81): [77..80]
 a40(r111): [78..79]
 a41(r82): [81..82]
 a42(r83): [83..84]
 a43(r110): [85..86]
 a44(r84): [87..88]
 a45(r85): [89..90]
 a46(r86): [91..92]
 a47(r87): [93..96]
 a48(r109): [94..95]
 a49(r88): [97..98]
 a50(r89): [99..100]
 a51(r108): [101..102]
 a52(r91): [105..107]
 a53(r92): [106..108]
 a54(r93): [109..110]
 a55(r94): [111..113]
 a56(r95): [112..114]
 a57(r96): [115..116]
 a58(r97): [117..118]
 a59(r98): [119..120]
 a60(r99): [121..122]
 a61(r107): [123..124]
 a62(r100): [125..126]
 a63(r106): [127..128]
 a64(r105): [129..130]
 a65(r101): [131..132]
 a66(r102): [133..134]
 a67(r104): [135..136]
  regions=2, blocks=37, points=137
    allocnos=68, copies=0, conflicts=0, ranges=69
Disposition:
    3:r58  l0     0    6:r59  l0     0    4:r60  l0     2    8:r61  l0     0
   10:r62  l0     0   11:r63  l0     0   12:r64  l0     0   13:r65  l0     0
   15:r66  l0     0   17:r67  l0     1   18:r68  l0     0   19:r69  l0     0
   21:r70  l0     0   25:r71  l0     0   27:r72  l0     0   28:r73  l0     0
   29:r74  l0     0   30:r75  l0     0   32:r76  l0     0   34:r77  l0     0
   36:r78  l0     0   37:r79  l0     0   38:r80  l0     0   39:r81  l0     0
   41:r82  l0     0   42:r83  l0     0   44:r84  l0     0   45:r85  l0     0
   46:r86  l0     0   47:r87  l0     0   49:r88  l0     0   50:r89  l0     0
    1:r90  l0     0   52:r91  l0     0   53:r92  l0     1   54:r93  l0     0
   55:r94  l0     0   56:r95  l0     1   57:r96  l0     0   58:r97  l0     0
   59:r98  l0     0   60:r99  l0     0   62:r100 l0     0   65:r101 l0     0
   66:r102 l0     0    0:r103 l0     0   67:r104 l0     0   64:r105 l0     0
   63:r106 l0     0   61:r107 l0     0   51:r108 l0     0   48:r109 l0     2
   43:r110 l0     0   40:r111 l0     2   35:r112 l0     0   33:r113 l0     0
   31:r114 l0     2   26:r115 l0     0   24:r116 l0     1   23:r117 l0     2
   22:r118 l0     0   20:r119 l0     0   16:r120 l0     0   14:r121 l0     0
    9:r122 l0     1    7:r123 l0     0    5:r124 l0     1    2:r125 l0     0
+++Costs: overall -30, reg -30, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 4
insn=16, live_throughout: 4, 7, dead_or_set: 5
insn=17, live_throughout: 4, 5, 7, dead_or_set: 0
insn=18, live_throughout: 7, dead_or_set: 0, 4, 5
insn=19, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 104
insn=27, live_throughout: 7, dead_or_set: 102, 104
insn=28, live_throughout: 7, dead_or_set: 101, 102
insn=29, live_throughout: 7, 101, dead_or_set: 4
insn=30, live_throughout: 4, 7, dead_or_set: 5, 101
insn=31, live_throughout: 7, dead_or_set: 0, 4, 5
insn=32, live_throughout: 7, dead_or_set: 0, 105
insn=33, live_throughout: 7, dead_or_set: 105, 106
insn=34, live_throughout: 7, dead_or_set: 100, 106
insn=35, live_throughout: 7, dead_or_set: 100
insn=36, live_throughout: 7, dead_or_set: 
insn=38, live_throughout: 7, dead_or_set: 107
insn=39, live_throughout: 7, dead_or_set: 99, 107
insn=40, live_throughout: 7, dead_or_set: 98, 99
insn=41, live_throughout: 7, 98, dead_or_set: 4
insn=42, live_throughout: 4, 7, dead_or_set: 5, 98
insn=43, live_throughout: 7, dead_or_set: 0, 4, 5
insn=44, live_throughout: 7, dead_or_set: 0, 97
insn=45, live_throughout: 7, dead_or_set: 97
insn=46, live_throughout: 7, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 96
insn=50, live_throughout: 7, dead_or_set: 95, 96
insn=51, live_throughout: 7, 95, dead_or_set: 94
insn=52, live_throughout: 7, 94, dead_or_set: 2, 95
insn=53, live_throughout: 2, 7, 94, dead_or_set: 1
insn=54, live_throughout: 1, 2, 7, 94, dead_or_set: 4
insn=55, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 94
insn=56, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=57, live_throughout: 7, dead_or_set: 93
insn=58, live_throughout: 7, dead_or_set: 92, 93
insn=59, live_throughout: 7, 92, dead_or_set: 91
insn=60, live_throughout: 7, 91, dead_or_set: 2, 92
insn=61, live_throughout: 2, 7, 91, dead_or_set: 1
insn=62, live_throughout: 1, 2, 7, 91, dead_or_set: 4
insn=63, live_throughout: 1, 2, 4, 7, dead_or_set: 5, 91
insn=64, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5
insn=65, live_throughout: 7, dead_or_set: 90
insn=274, live_throughout: 7, 90, dead_or_set: 
insn=68, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 
insn=73, live_throughout: 7, dead_or_set: 108
insn=74, live_throughout: 7, dead_or_set: 89, 108
insn=75, live_throughout: 7, dead_or_set: 88, 89
insn=76, live_throughout: 7, dead_or_set: 87, 88
insn=77, live_throughout: 7, 87, dead_or_set: 109
insn=78, live_throughout: 7, 87, 109, dead_or_set: 1
insn=79, live_throughout: 1, 7, 87, dead_or_set: 4, 109
insn=80, live_throughout: 1, 4, 7, dead_or_set: 5, 87
insn=81, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=82, live_throughout: 7, dead_or_set: 0, 86
insn=83, live_throughout: 7, dead_or_set: 86
insn=84, live_throughout: 7, dead_or_set: 85
insn=85, live_throughout: 7, dead_or_set: 84, 85
insn=86, live_throughout: 7, dead_or_set: 84
insn=87, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 
insn=91, live_throughout: 7, dead_or_set: 
insn=93, live_throughout: 7, dead_or_set: 4
insn=94, live_throughout: 4, 7, dead_or_set: 5
insn=95, live_throughout: 4, 5, 7, dead_or_set: 0
insn=96, live_throughout: 7, dead_or_set: 0, 4, 5
insn=97, live_throughout: 7, dead_or_set: 
insn=99, live_throughout: 7, dead_or_set: 
insn=100, live_throughout: 7, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 110
insn=103, live_throughout: 7, dead_or_set: 83, 110
insn=104, live_throughout: 7, dead_or_set: 82, 83
insn=105, live_throughout: 7, dead_or_set: 81, 82
insn=106, live_throughout: 7, 81, dead_or_set: 111
insn=107, live_throughout: 7, 81, 111, dead_or_set: 1
insn=108, live_throughout: 1, 7, 81, dead_or_set: 4, 111
insn=109, live_throughout: 1, 4, 7, dead_or_set: 5, 81
insn=110, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=111, live_throughout: 7, dead_or_set: 0, 80
insn=112, live_throughout: 7, dead_or_set: 80
insn=113, live_throughout: 7, dead_or_set: 79
insn=114, live_throughout: 7, dead_or_set: 78, 79
insn=115, live_throughout: 7, dead_or_set: 78
insn=116, live_throughout: 7, dead_or_set: 
insn=118, live_throughout: 7, dead_or_set: 
insn=119, live_throughout: 7, dead_or_set: 
insn=120, live_throughout: 7, dead_or_set: 
insn=122, live_throughout: 7, dead_or_set: 4
insn=123, live_throughout: 4, 7, dead_or_set: 5
insn=124, live_throughout: 4, 5, 7, dead_or_set: 0
insn=125, live_throughout: 7, dead_or_set: 0, 4, 5
insn=126, live_throughout: 7, dead_or_set: 
insn=128, live_throughout: 7, dead_or_set: 112
insn=129, live_throughout: 7, dead_or_set: 112
insn=130, live_throughout: 7, dead_or_set: 
insn=132, live_throughout: 7, dead_or_set: 4
insn=133, live_throughout: 4, 7, dead_or_set: 5
insn=134, live_throughout: 4, 5, 7, dead_or_set: 0
insn=135, live_throughout: 7, dead_or_set: 0, 4, 5
insn=136, live_throughout: 7, dead_or_set: 
insn=138, live_throughout: 7, dead_or_set: 5
insn=139, live_throughout: 7, dead_or_set: 0, 5
insn=140, live_throughout: 7, dead_or_set: 0, 77
insn=141, live_throughout: 7, dead_or_set: 77
insn=142, live_throughout: 7, dead_or_set: 
insn=143, live_throughout: 7, dead_or_set: 
insn=145, live_throughout: 7, dead_or_set: 113
insn=146, live_throughout: 7, dead_or_set: 76, 113
insn=147, live_throughout: 7, dead_or_set: 76
insn=148, live_throughout: 7, dead_or_set: 
insn=150, live_throughout: 7, dead_or_set: 75
insn=151, live_throughout: 7, 75, dead_or_set: 114
insn=152, live_throughout: 7, 75, 114, dead_or_set: 1
insn=153, live_throughout: 1, 7, 75, dead_or_set: 4, 114
insn=154, live_throughout: 1, 4, 7, dead_or_set: 5, 75
insn=155, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=156, live_throughout: 7, dead_or_set: 0, 74
insn=157, live_throughout: 7, dead_or_set: 74
insn=158, live_throughout: 7, dead_or_set: 
insn=159, live_throughout: 7, dead_or_set: 
insn=161, live_throughout: 7, dead_or_set: 73
insn=162, live_throughout: 7, dead_or_set: 72, 73
insn=163, live_throughout: 7, dead_or_set: 72
insn=164, live_throughout: 7, dead_or_set: 
insn=165, live_throughout: 7, dead_or_set: 
insn=167, live_throughout: 7, dead_or_set: 
insn=168, live_throughout: 7, dead_or_set: 
insn=170, live_throughout: 7, dead_or_set: 
insn=171, live_throughout: 7, dead_or_set: 5
insn=172, live_throughout: 7, dead_or_set: 0, 5
insn=173, live_throughout: 7, dead_or_set: 0, 115
insn=174, live_throughout: 7, dead_or_set: 71, 115
insn=175, live_throughout: 7, dead_or_set: 71
insn=176, live_throughout: 7, dead_or_set: 
insn=276, live_throughout: 7, dead_or_set: 
insn=252, live_throughout: 7, dead_or_set: 
insn=180, live_throughout: 7, dead_or_set: 116
insn=181, live_throughout: 7, 116, dead_or_set: 117
insn=182, live_throughout: 7, 116, 117, dead_or_set: 118
insn=183, live_throughout: 7, 117, 118, dead_or_set: 1, 116
insn=184, live_throughout: 1, 7, 118, dead_or_set: 4, 117
insn=185, live_throughout: 1, 4, 7, dead_or_set: 5, 118
insn=186, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=187, live_throughout: 7, dead_or_set: 0, 70
insn=188, live_throughout: 7, dead_or_set: 70
insn=189, live_throughout: 7, dead_or_set: 
insn=191, live_throughout: 7, dead_or_set: 
insn=192, live_throughout: 7, dead_or_set: 
insn=194, live_throughout: 7, dead_or_set: 119
insn=195, live_throughout: 7, dead_or_set: 69, 119
insn=196, live_throughout: 7, dead_or_set: 68, 69
insn=197, live_throughout: 7, dead_or_set: 67, 68
insn=198, live_throughout: 7, 67, dead_or_set: 120
insn=199, live_throughout: 7, 120, dead_or_set: 4, 67
insn=200, live_throughout: 4, 7, dead_or_set: 5, 120
insn=201, live_throughout: 7, dead_or_set: 0, 4, 5
insn=202, live_throughout: 7, dead_or_set: 0, 66
insn=203, live_throughout: 7, dead_or_set: 66
insn=204, live_throughout: 7, dead_or_set: 
insn=205, live_throughout: 7, dead_or_set: 
insn=207, live_throughout: 7, dead_or_set: 
insn=278, live_throughout: 7, dead_or_set: 
insn=210, live_throughout: 7, dead_or_set: 
insn=212, live_throughout: 7, dead_or_set: 4
insn=213, live_throughout: 4, 7, dead_or_set: 5
insn=214, live_throughout: 4, 5, 7, dead_or_set: 0
insn=215, live_throughout: 7, dead_or_set: 0, 4, 5
insn=216, live_throughout: 7, dead_or_set: 
insn=218, live_throughout: 7, dead_or_set: 121
insn=219, live_throughout: 7, dead_or_set: 65, 121
insn=220, live_throughout: 7, dead_or_set: 64, 65
insn=221, live_throughout: 7, dead_or_set: 63, 64
insn=222, live_throughout: 7, dead_or_set: 62, 63
insn=223, live_throughout: 7, dead_or_set: 61, 62
insn=224, live_throughout: 7, 61, dead_or_set: 122
insn=225, live_throughout: 7, dead_or_set: 61, 122
insn=226, live_throughout: 7, dead_or_set: 123
insn=227, live_throughout: 7, dead_or_set: 123
insn=228, live_throughout: 7, dead_or_set: 
insn=230, live_throughout: 7, dead_or_set: 60
insn=231, live_throughout: 7, 60, dead_or_set: 59
insn=232, live_throughout: 7, 60, dead_or_set: 58, 59
insn=233, live_throughout: 7, 58, 60, dead_or_set: 124
insn=234, live_throughout: 7, 58, 60, dead_or_set: 1, 124
insn=235, live_throughout: 1, 7, 58, dead_or_set: 4, 60
insn=236, live_throughout: 1, 4, 7, dead_or_set: 5, 58
insn=237, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=238, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=280, live_throughout: 7, dead_or_set: 
insn=241, live_throughout: 7, dead_or_set: 
insn=243, live_throughout: 7, dead_or_set: 4
insn=244, live_throughout: 4, 7, dead_or_set: 5
insn=245, live_throughout: 4, 5, 7, dead_or_set: 0
insn=246, live_throughout: 7, dead_or_set: 0, 4, 5
insn=247, live_throughout: 7, dead_or_set: 
insn=249, live_throughout: 7, dead_or_set: 
insn=250, live_throughout: 7, dead_or_set: 
insn=253, live_throughout: 7, dead_or_set: 125
insn=254, live_throughout: 7, dead_or_set: 125
insn=255, live_throughout: 7, dead_or_set: 
insn=257, live_throughout: 7, dead_or_set: 90
insn=258, live_throughout: 7, 90, dead_or_set: 
insn=260, live_throughout: 7, dead_or_set: 90, 103
insn=264, live_throughout: 7, dead_or_set: 0, 103
insn=270, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 232
changing reg in insn 236
changing reg in insn 231
changing reg in insn 232
changing reg in insn 230
changing reg in insn 235
changing reg in insn 223
changing reg in insn 225
changing reg in insn 222
changing reg in insn 223
changing reg in insn 221
changing reg in insn 222
changing reg in insn 220
changing reg in insn 221
changing reg in insn 219
changing reg in insn 220
changing reg in insn 202
changing reg in insn 203
changing reg in insn 197
changing reg in insn 199
changing reg in insn 196
changing reg in insn 197
changing reg in insn 195
changing reg in insn 196
changing reg in insn 187
changing reg in insn 188
changing reg in insn 174
changing reg in insn 175
changing reg in insn 162
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 156
changing reg in insn 157
changing reg in insn 150
changing reg in insn 154
changing reg in insn 146
changing reg in insn 147
changing reg in insn 140
changing reg in insn 141
changing reg in insn 114
changing reg in insn 115
changing reg in insn 113
changing reg in insn 114
changing reg in insn 111
changing reg in insn 112
changing reg in insn 105
changing reg in insn 109
changing reg in insn 104
changing reg in insn 105
changing reg in insn 103
changing reg in insn 104
changing reg in insn 85
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 82
changing reg in insn 83
changing reg in insn 76
changing reg in insn 80
changing reg in insn 75
changing reg in insn 76
changing reg in insn 74
changing reg in insn 75
changing reg in insn 257
changing reg in insn 65
changing reg in insn 260
changing reg in insn 59
changing reg in insn 63
changing reg in insn 58
changing reg in insn 60
changing reg in insn 57
changing reg in insn 58
changing reg in insn 51
changing reg in insn 55
changing reg in insn 50
changing reg in insn 52
changing reg in insn 49
changing reg in insn 50
changing reg in insn 44
changing reg in insn 45
changing reg in insn 40
changing reg in insn 42
changing reg in insn 39
changing reg in insn 40
changing reg in insn 34
changing reg in insn 35
changing reg in insn 28
changing reg in insn 30
changing reg in insn 27
changing reg in insn 28
changing reg in insn 260
changing reg in insn 264
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 79
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 108
changing reg in insn 128
changing reg in insn 129
changing reg in insn 145
changing reg in insn 146
changing reg in insn 151
changing reg in insn 153
changing reg in insn 173
changing reg in insn 174
changing reg in insn 180
changing reg in insn 183
changing reg in insn 181
changing reg in insn 184
changing reg in insn 182
changing reg in insn 185
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 200
changing reg in insn 218
changing reg in insn 219
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 233
changing reg in insn 234
changing reg in insn 253
changing reg in insn 254
deleting insn with uid = 32.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 44.
deleting insn with uid = 76.
deleting insn with uid = 82.
deleting insn with uid = 105.
deleting insn with uid = 111.
deleting insn with uid = 140.
deleting insn with uid = 156.
deleting insn with uid = 173.
deleting insn with uid = 174.
deleting insn with uid = 183.
deleting insn with uid = 187.
deleting insn with uid = 202.
deleting insn with uid = 232.
deleting insn with uid = 234.
deleting insn with uid = 260.
deleting insn with uid = 264.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 125.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 172.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 201.
verify found no changes in insn with uid = 215.
verify found no changes in insn with uid = 238.
verify found no changes in insn with uid = 246.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={68d,58u} r1={30d,11u} r2={26d,7u} r4={35d,17u} r5={37d,19u} r6={1d,91u} r7={1d,54u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={53d,21u} r18={18d} r19={18d} r20={1d,1u,5d} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d} r38={19d} r39={19d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} 
;;    total ref usage 1231{947d,279u,5e} in 183{165 regular + 18 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 primos.c:8 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) 47 {*movsi_1} (nil))

(insn 3 2 4 2 primos.c:8 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) 89 {*movdi_1_rex64} (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 primos.c:21 (set (mem/f/c/i:DI (symbol_ref:DI ("argv0") [flags 0x40]  <var_decl 0x7f37dfd9b6e0 argv0>) [0 argv0+0 S8 A64])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <string_cst 0x7f37dfcb6d80>)) 89 {*movdi_1_rex64} (nil))

(insn 8 7 9 2 primos.c:24 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 9 8 10 2 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 13)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4
;; Succ edge  3 (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  2 (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 primos.c:24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 3 [0x3]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 12 11 13 3 primos.c:24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 13 12 14 4 2 "" [1 uses])

(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 primos.c:26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <string_cst 0x7f37dfcbae60>)) 89 {*movdi_1_rex64} (nil))

(insn 16 15 17 4 primos.c:26 (set (reg:SI 5 di)
        (const_int 64 [0x40])) 47 {*movsi_1} (nil))

(insn 17 16 18 4 primos.c:26 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 18 17 19 4 primos.c:26 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 19 18 20 5 3 "" [1 uses])

(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 primos.c:29 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (const_int 100 [0x64])) 89 {*movdi_1_rex64} (nil))

(insn 22 21 23 5 primos.c:30 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (const_int 1 [0x1])) 89 {*movdi_1_rex64} (nil))

(insn 23 22 24 5 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 24 23 25 5 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 5 -> ( 6 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  9

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 100 101 102 104 105 106

;; Pred edge  5 (fallthru)
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 6 primos.c:32 (set (reg/f:DI 0 ax [104])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 27 26 28 6 primos.c:32 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.3789 ] [102])
                (plus:DI (reg/f:DI 0 ax [104])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 28 27 29 6 primos.c:32 (set (reg/f:DI 0 ax [orig:101 D.3790 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:102 D.3789 ] [102]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 29 28 30 6 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <string_cst 0x7f37dfcb6e70>)) 89 {*movdi_1_rex64} (nil))

(insn 30 29 31 6 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 D.3790 ] [101])) 89 {*movdi_1_rex64} (nil))

(call_insn/i 31 30 35 6 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 35 31 36 6 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 D.3791 ] [100])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 36 35 37 6 primos.c:32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 6 -> ( 8 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8
;; Succ edge  7 (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 97 98 99 107

;; Pred edge  6 (fallthru)
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 7 primos.c:32 (set (reg/f:DI 0 ax [107])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 39 38 40 7 primos.c:32 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.3793 ] [99])
                (plus:DI (reg/f:DI 0 ax [107])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 40 39 41 7 primos.c:32 (set (reg/f:DI 0 ax [orig:98 D.3794 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.3793 ] [99]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 41 40 42 7 primos.c:32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <string_cst 0x7f37dfcb6ed0>)) 89 {*movdi_1_rex64} (nil))

(insn 42 41 43 7 primos.c:32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:98 D.3794 ] [98])) 89 {*movdi_1_rex64} (nil))

(call_insn/i 43 42 45 7 primos.c:32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f37e0027e00 strcmp>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 45 43 46 7 primos.c:32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.3795 ] [97])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 46 45 47 7 primos.c:32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 90 91 92 93 94 95 96

;; Pred edge  6
;; Pred edge  7 (fallthru)
(code_label 47 46 48 8 5 "" [1 uses])

(note 48 47 49 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 8 primos.c:34 (set (reg/f:DI 0 ax [orig:96 stdout.0 ] [96])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 50 49 51 8 primos.c:34 (set (reg/f:DI 1 dx [orig:95 stdout.1 ] [95])
        (reg/f:DI 0 ax [orig:96 stdout.0 ] [96])) 89 {*movdi_1_rex64} (nil))

(insn 51 50 52 8 primos.c:34 (set (reg/f:DI 0 ax [orig:94 D.3798 ] [94])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <string_cst 0x7f37dfcba8c0>)) 89 {*movdi_1_rex64} (nil))

(insn 52 51 53 8 primos.c:34 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:95 stdout.1 ] [95])) 89 {*movdi_1_rex64} (nil))

(insn 53 52 54 8 primos.c:34 (set (reg:DI 1 dx)
        (const_int 39 [0x27])) 89 {*movdi_1_rex64} (nil))

(insn 54 53 55 8 primos.c:34 (set (reg:DI 4 si)
        (const_int 1 [0x1])) 89 {*movdi_1_rex64} (nil))

(insn 55 54 56 8 primos.c:34 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.3798 ] [94])) 89 {*movdi_1_rex64} (nil))

(call_insn 56 55 57 8 primos.c:34 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(insn 57 56 58 8 primos.c:35 (set (reg/f:DI 0 ax [orig:93 stdout.2 ] [93])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 58 57 59 8 primos.c:35 (set (reg/f:DI 1 dx [orig:92 stdout.3 ] [92])
        (reg/f:DI 0 ax [orig:93 stdout.2 ] [93])) 89 {*movdi_1_rex64} (nil))

(insn 59 58 60 8 primos.c:35 (set (reg/f:DI 0 ax [orig:91 D.3801 ] [91])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <string_cst 0x7f37dfcb9540>)) 89 {*movdi_1_rex64} (nil))

(insn 60 59 61 8 primos.c:35 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:92 stdout.3 ] [92])) 89 {*movdi_1_rex64} (nil))

(insn 61 60 62 8 primos.c:35 (set (reg:DI 1 dx)
        (const_int 74 [0x4a])) 89 {*movdi_1_rex64} (nil))

(insn 62 61 63 8 primos.c:35 (set (reg:DI 4 si)
        (const_int 1 [0x1])) 89 {*movdi_1_rex64} (nil))

(insn 63 62 64 8 primos.c:35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 D.3801 ] [91])) 89 {*movdi_1_rex64} (nil))

(call_insn 64 63 65 8 primos.c:35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f37e0031b00 __builtin_fwrite>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                    (nil))))))

(insn 65 64 274 8 primos.c:36 (set (reg:SI 0 ax [orig:90 D.3802 ] [90])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 274 65 275 8 primos.c:36 (set (pc)
        (label_ref 258)) 638 {jump} (nil))
;; End of basic block 8 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90


;; Succ edge  36 [100.0%] 

(barrier 275 274 68)

;; Start of basic block ( 5 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5
;; Pred edge  7
(code_label 68 275 69 9 4 "" [2 uses])

(note 69 68 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 9 primos.c:39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 71 70 72 9 primos.c:39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 9 -> ( 10 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  19

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 84 85 86 87 88 89 108 109

;; Pred edge  9 (fallthru)
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 73 72 74 10 primos.c:41 (set (reg/f:DI 0 ax [108])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 74 73 75 10 primos.c:41 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.3805 ] [89])
                (plus:DI (reg/f:DI 0 ax [108])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))

(insn 75 74 77 10 primos.c:41 (set (reg/f:DI 0 ax [orig:88 D.3806 ] [88])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.3805 ] [89]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 77 75 78 10 primos.c:41 (parallel [
            (set (reg:DI 2 cx [109])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 78 77 79 10 primos.c:41 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) 47 {*movsi_1} (nil))

(insn 79 78 80 10 primos.c:41 (set (reg:DI 4 si)
        (reg:DI 2 cx [109])) 89 {*movdi_1_rex64} (nil))

(insn 80 79 81 10 primos.c:41 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.3807 ] [87])) 89 {*movdi_1_rex64} (nil))

(call_insn 81 80 83 10 primos.c:41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 83 81 84 10 primos.c:41 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
        (reg:DI 0 ax [orig:86 hasta.4 ] [86])) 89 {*movdi_1_rex64} (nil))

(insn 84 83 85 10 primos.c:42 (set (reg/f:DI 0 ax [orig:85 end.5 ] [85])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 85 84 86 10 primos.c:42 (set (reg:QI 0 ax [orig:84 D.3812 ] [84])
        (mem:QI (reg/f:DI 0 ax [orig:85 end.5 ] [85]) [0 S1 A8])) 62 {*movqi_1} (nil))

(insn 86 85 87 10 primos.c:42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.3812 ] [84])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil))

(jump_insn 87 86 88 10 primos.c:42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12
;; Succ edge  11 (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  10 (fallthru)
(note 88 87 89 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 11 primos.c:42 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 90 89 91 11 primos.c:42 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 97)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  13

;; Start of basic block ( 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  10
;; Pred edge  11 (fallthru)
(code_label 91 90 92 12 8 "" [1 uses])

(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 94 12 primos.c:44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <string_cst 0x7f37dfcb4ba0>)) 89 {*movdi_1_rex64} (nil))

(insn 94 93 95 12 primos.c:44 (set (reg:SI 5 di)
        (const_int 64 [0x40])) 47 {*movsi_1} (nil))

(insn 95 94 96 12 primos.c:44 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 96 95 97 12 primos.c:44 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  11
;; Pred edge  12 (fallthru)
(code_label 97 96 98 13 9 "" [1 uses])

(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 100 13 primos.c:47 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 100 99 101 13 primos.c:47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 13 -> ( 14 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  19

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 78 79 80 81 82 83 110 111

;; Pred edge  13 (fallthru)
(note 101 100 102 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 103 14 primos.c:49 (set (reg/f:DI 0 ax [110])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 103 102 104 14 primos.c:49 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.3816 ] [83])
                (plus:DI (reg/f:DI 0 ax [110])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (expr_list:REG_EQUAL (plus:DI (mem/f/c/i:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 argv+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))

(insn 104 103 106 14 primos.c:49 (set (reg/f:DI 0 ax [orig:82 D.3817 ] [82])
        (mem/f:DI (reg/f:DI 0 ax [orig:83 D.3816 ] [83]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 106 104 107 14 primos.c:49 (parallel [
            (set (reg:DI 2 cx [111])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 107 106 108 14 primos.c:49 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) 47 {*movsi_1} (nil))

(insn 108 107 109 14 primos.c:49 (set (reg:DI 4 si)
        (reg:DI 2 cx [111])) 89 {*movdi_1_rex64} (nil))

(insn 109 108 110 14 primos.c:49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:81 D.3818 ] [81])) 89 {*movdi_1_rex64} (nil))

(call_insn 110 109 112 14 primos.c:49 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 112 110 113 14 primos.c:49 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
        (reg:DI 0 ax [orig:80 desde.6 ] [80])) 89 {*movdi_1_rex64} (nil))

(insn 113 112 114 14 primos.c:50 (set (reg/f:DI 0 ax [orig:79 end.7 ] [79])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 114 113 115 14 primos.c:50 (set (reg:QI 0 ax [orig:78 D.3823 ] [78])
        (mem:QI (reg/f:DI 0 ax [orig:79 end.7 ] [79]) [0 S1 A8])) 62 {*movqi_1} (nil))

(insn 115 114 116 14 primos.c:50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:78 D.3823 ] [78])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil))

(jump_insn 116 115 117 14 primos.c:50 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 14 -> ( 16 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16
;; Succ edge  15 (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  14 (fallthru)
(note 117 116 118 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 15 primos.c:50 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 119 118 120 15 primos.c:50 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 126)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  17

;; Start of basic block ( 14 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  14
;; Pred edge  15 (fallthru)
(code_label 120 119 121 16 10 "" [1 uses])

(note 121 120 122 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 122 121 123 16 primos.c:52 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <string_cst 0x7f37dfcb4cc0>)) 89 {*movdi_1_rex64} (nil))

(insn 123 122 124 16 primos.c:52 (set (reg:SI 5 di)
        (const_int 64 [0x40])) 47 {*movsi_1} (nil))

(insn 124 123 125 16 primos.c:52 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 125 124 126 16 primos.c:52 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 16 -> ( 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112

;; Pred edge  15
;; Pred edge  16 (fallthru)
(code_label 126 125 127 17 11 "" [1 uses])

(note 127 126 128 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 128 127 129 17 primos.c:54 (set (reg:DI 0 ax [112])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 129 128 130 17 primos.c:54 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [112])
            (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) 2 {cmpdi_1_insn_rex64} (nil))

(jump_insn 130 129 131 17 primos.c:54 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 136)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)
;; Succ edge  19

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  17 (fallthru)
(note 131 130 132 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 18 primos.c:56 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <string_cst 0x7f37dfcb4d80>)) 89 {*movdi_1_rex64} (nil))

(insn 133 132 134 18 primos.c:56 (set (reg:SI 5 di)
        (const_int 64 [0x40])) 47 {*movsi_1} (nil))

(insn 134 133 135 18 primos.c:56 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 135 134 136 18 primos.c:56 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)

;; Start of basic block ( 9 13 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 77

;; Pred edge  9
;; Pred edge  13
;; Pred edge  17
;; Pred edge  18 (fallthru)
(code_label 136 135 137 19 7 "" [3 uses])

(note 137 136 138 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 138 137 139 19 primos.c:61 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <string_cst 0x7f37dfcb1540>)) 89 {*movdi_1_rex64} (nil))

(call_insn 139 138 141 19 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getenv") [flags 0x41]  <function_decl 0x7f37dfd7e200 getenv>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 141 139 142 19 primos.c:61 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
        (reg/f:DI 0 ax [orig:77 valEnv.8 ] [77])) 89 {*movdi_1_rex64} (nil))

(insn 142 141 143 19 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 143 142 144 19 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 19 -> ( 23 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23
;; Succ edge  20 (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 76 113

;; Pred edge  19 (fallthru)
(note 144 143 145 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 145 144 146 20 primos.c:61 (set (reg/f:DI 0 ax [113])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 146 145 147 20 primos.c:61 (set (reg:QI 0 ax [orig:76 D.3831 ] [76])
        (mem:QI (reg/f:DI 0 ax [113]) [0 S1 A8])) 62 {*movqi_1} (nil))

(insn 147 146 148 20 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:76 D.3831 ] [76])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil))

(jump_insn 148 147 149 20 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 20 -> ( 23 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23
;; Succ edge  21 (fallthru)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74 75 114

;; Pred edge  20 (fallthru)
(note 149 148 150 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 150 149 151 21 primos.c:61 (set (reg/f:DI 0 ax [orig:75 valEnv.9 ] [75])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 valEnv+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 151 150 152 21 primos.c:61 (parallel [
            (set (reg:DI 2 cx [114])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 152 151 153 21 primos.c:61 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) 47 {*movsi_1} (nil))

(insn 153 152 154 21 primos.c:61 (set (reg:DI 4 si)
        (reg:DI 2 cx [114])) 89 {*movdi_1_rex64} (nil))

(insn 154 153 155 21 primos.c:61 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:75 valEnv.9 ] [75])) 89 {*movdi_1_rex64} (nil))

(call_insn 155 154 157 21 primos.c:61 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f37dff3bb00 strtol>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 157 155 158 21 primos.c:61 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (reg:DI 0 ax [orig:74 max.10 ] [74])) 89 {*movdi_1_rex64} (nil))

(insn 158 157 159 21 primos.c:61 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 159 158 160 21 primos.c:61 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 165)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 21 -> ( 23 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23
;; Succ edge  22 (fallthru)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72 73

;; Pred edge  21 (fallthru)
(note 160 159 161 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 161 160 162 22 primos.c:61 (set (reg/f:DI 0 ax [orig:73 end.11 ] [73])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 end+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 162 161 163 22 primos.c:61 (set (reg:QI 0 ax [orig:72 D.3837 ] [72])
        (mem:QI (reg/f:DI 0 ax [orig:73 end.11 ] [73]) [0 S1 A8])) 62 {*movqi_1} (nil))

(insn 163 162 164 22 primos.c:61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:72 D.3837 ] [72])
            (const_int 0 [0x0]))) 9 {*cmpqi_ccno_1} (nil))

(jump_insn 164 163 165 22 primos.c:61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 22 -> ( 23 24)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 (fallthru)
;; Succ edge  24

;; Start of basic block ( 19 20 21 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  19
;; Pred edge  20
;; Pred edge  21
;; Pred edge  22 (fallthru)
(code_label 165 164 166 23 12 "" [3 uses])

(note 166 165 167 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 167 166 168 23 primos.c:63 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 max+0 S8 A64])
        (const_int 100 [0x64])) 89 {*movdi_1_rex64} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)

;; Start of basic block ( 22 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 71 115

;; Pred edge  22
;; Pred edge  23 (fallthru)
(code_label 168 167 169 24 13 "" [1 uses])

(note 169 168 170 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 170 169 171 24 primos.c:66 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))

(insn 171 170 172 24 primos.c:67 (set (reg:DI 5 di)
        (const_int 8 [0x8])) 89 {*movdi_1_rex64} (nil))

(call_insn 172 171 175 24 primos.c:67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f37e0052700 malloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 175 172 176 24 primos.c:67 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 0 ax [orig:71 D.3838 ] [71])) 89 {*movdi_1_rex64} (nil))

(insn 176 175 276 24 primos.c:68 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
        (const_int 2 [0x2])) 89 {*movdi_1_rex64} (nil))

(jump_insn 276 176 277 24 primos.c:68 (set (pc)
        (label_ref 250)) 638 {jump} (nil))
;; End of basic block 24 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34 [100.0%] 

(barrier 277 276 252)

;; Start of basic block ( 34) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 116 117 118

;; Pred edge  34
(code_label 252 277 179 25 19 "" [1 uses])

(note 179 252 180 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 180 179 181 25 primos.c:70 (set (reg:DI 1 dx [116])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 181 180 182 25 primos.c:70 (set (reg:SI 2 cx [117])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 182 181 184 25 primos.c:70 (set (reg:DI 0 ax [118])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 184 182 185 25 primos.c:70 (set (reg:SI 4 si)
        (reg:SI 2 cx [117])) 47 {*movsi_1} (nil))

(insn 185 184 186 25 primos.c:70 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) 89 {*movdi_1_rex64} (nil))

(call_insn 186 185 188 25 primos.c:70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("esPrimo") [flags 0x3]  <function_decl 0x7f37dfe16e00 esPrimo>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:SI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (nil)))))

(insn 188 186 189 25 primos.c:70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 D.3839 ] [70])
            (const_int 0 [0x0]))) 3 {*cmpsi_ccno_1} (nil))

(jump_insn 189 188 190 25 primos.c:70 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 241)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 25 -> ( 26 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26 (fallthru)
;; Succ edge  32

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  25 (fallthru)
(note 190 189 191 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 191 190 192 26 primos.c:72 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 192 191 193 26 primos.c:72 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 216)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 26 -> ( 27 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27 (fallthru)
;; Succ edge  30

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 66 67 68 69 119 120

;; Pred edge  26 (fallthru)
(note 193 192 194 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 194 193 195 27 primos.c:74 (set (reg:SI 0 ax [119])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 195 194 196 27 primos.c:74 (parallel [
            (set (reg:SI 0 ax [orig:69 D.3844 ] [69])
                (plus:SI (reg:SI 0 ax [119])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 286 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 196 195 197 27 primos.c:74 (set (reg:DI 0 ax [orig:68 D.3845 ] [68])
        (sign_extend:DI (reg:SI 0 ax [orig:69 D.3844 ] [69]))) 127 {extendsidi2_rex64} (nil))

(insn 197 196 198 27 primos.c:74 (parallel [
            (set (reg:DI 1 dx [orig:67 D.3846 ] [67])
                (ashift:DI (reg:DI 0 ax [orig:68 D.3845 ] [68])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 491 {*ashldi3_1_rex64} (nil))

(insn 198 197 199 27 primos.c:74 (set (reg:DI 0 ax [120])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 199 198 200 27 primos.c:74 (set (reg:DI 4 si)
        (reg:DI 1 dx [orig:67 D.3846 ] [67])) 89 {*movdi_1_rex64} (nil))

(insn 200 199 201 27 primos.c:74 (set (reg:DI 5 di)
        (reg:DI 0 ax [120])) 89 {*movdi_1_rex64} (nil))

(call_insn 201 200 203 27 primos.c:74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f37e0054300 realloc>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 203 201 204 27 primos.c:74 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
        (reg/f:DI 0 ax [orig:66 D.3847 ] [66])) 89 {*movdi_1_rex64} (nil))

(insn 204 203 205 27 primos.c:74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 205 204 206 27 primos.c:74 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 210)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 27 -> ( 28 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  28 (fallthru)
;; Succ edge  29

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  27 (fallthru)
(note 206 205 207 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 207 206 278 28 primos.c:76 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 286 {*addsi_1} (nil))

(jump_insn 278 207 279 28 (set (pc)
        (label_ref 216)) 638 {jump} (nil))
;; End of basic block 28 -> ( 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 [100.0%] 

(barrier 279 278 210)

;; Start of basic block ( 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  27
(code_label 210 279 211 29 17 "" [1 uses])

(note 211 210 212 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 212 211 213 29 primos.c:80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <string_cst 0x7f37dfcb4f60>)) 89 {*movdi_1_rex64} (nil))

(insn 213 212 214 29 primos.c:80 (set (reg:SI 5 di)
        (const_int 71 [0x47])) 47 {*movsi_1} (nil))

(insn 214 213 215 29 primos.c:80 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 215 214 216 29 primos.c:80 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 29 -> ( 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 (fallthru)

;; Start of basic block ( 26 29 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64 65 121 122 123

;; Pred edge  26
;; Pred edge  29 (fallthru)
;; Pred edge  28 [100.0%] 
(code_label 216 215 217 30 16 "" [2 uses])

(note 217 216 218 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 218 217 219 30 primos.c:83 (set (reg:SI 0 ax [121])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 219 218 220 30 primos.c:83 (set (reg:DI 0 ax [orig:65 D.3851 ] [65])
        (sign_extend:DI (reg:SI 0 ax [121]))) 127 {extendsidi2_rex64} (nil))

(insn 220 219 221 30 primos.c:83 (parallel [
            (set (reg:DI 0 ax [orig:64 D.3852 ] [64])
                (plus:DI (reg:DI 0 ax [orig:65 D.3851 ] [65])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 221 220 222 30 primos.c:83 (parallel [
            (set (reg:DI 0 ax [orig:63 D.3853 ] [63])
                (ashift:DI (reg:DI 0 ax [orig:64 D.3852 ] [64])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 491 {*ashldi3_1_rex64} (nil))

(insn 222 221 223 30 primos.c:83 (parallel [
            (set (reg/f:DI 0 ax [orig:62 D.3854 ] [62])
                (plus:DI (reg:DI 0 ax [orig:63 D.3853 ] [63])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 primos+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 223 222 224 30 primos.c:83 (set (reg/f:DI 0 ax [orig:61 D.3855 ] [61])
        (mem/f:DI (reg/f:DI 0 ax [orig:62 D.3854 ] [62]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 224 223 225 30 primos.c:83 (set (reg:DI 1 dx [122])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 225 224 226 30 primos.c:83 (set (mem:DI (reg/f:DI 0 ax [orig:61 D.3855 ] [61]) [0 S8 A64])
        (reg:DI 1 dx [122])) 89 {*movdi_1_rex64} (nil))

(insn 226 225 227 30 primos.c:84 (set (reg:DI 0 ax [123])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 227 226 228 30 primos.c:84 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [123])
            (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 desde+0 S8 A64]))) 2 {cmpdi_1_insn_rex64} (nil))

(jump_insn 228 227 229 30 primos.c:84 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 247)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 30 -> ( 31 33)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  31 (fallthru)
;; Succ edge  33

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 58 59 60 124

;; Pred edge  30 (fallthru)
(note 229 228 230 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 230 229 231 31 primos.c:86 (set (reg/f:DI 2 cx [orig:60 D.3858 ] [60])
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <string_cst 0x7f37dfcb17b0>)) 89 {*movdi_1_rex64} (nil))

(insn 231 230 233 31 primos.c:86 (set (reg/f:DI 0 ax [orig:59 stdout.12 ] [59])
        (mem/f/c/i:DI (symbol_ref:DI ("stdout") [flags 0x40]  <var_decl 0x7f37dfefe500 stdout>) [0 stdout+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 233 231 235 31 primos.c:86 (set (reg:DI 1 dx [124])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 235 233 236 31 primos.c:86 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:60 D.3858 ] [60])) 89 {*movdi_1_rex64} (nil))

(insn 236 235 237 31 primos.c:86 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:58 stdout.13 ] [58])) 89 {*movdi_1_rex64} (nil))

(insn 237 236 238 31 primos.c:86 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 238 237 280 31 primos.c:86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f37e002da00 fprintf>) [0 S1 A8])
            (const_int 0 [0x0]))) 936 {*call_value_0_rex64} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(jump_insn 280 238 281 31 (set (pc)
        (label_ref 247)) 638 {jump} (nil))
;; End of basic block 31 -> ( 33)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 [100.0%] 

(barrier 281 280 241)

;; Start of basic block ( 25) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  25
(code_label 241 281 242 32 15 "" [1 uses])

(note 242 241 243 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 243 242 244 32 primos.c:91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <string_cst 0x7f37dfcb94d0>)) 89 {*movdi_1_rex64} (nil))

(insn 244 243 245 32 primos.c:91 (set (reg:SI 5 di)
        (const_int 77 [0x4d])) 47 {*movsi_1} (nil))

(insn 245 244 246 32 primos.c:91 (set (reg:QI 0 ax)
        (const_int 0 [0x0])) 62 {*movqi_1} (nil))

(call_insn 246 245 247 32 primos.c:91 (call (mem:QI (symbol_ref:DI ("Error") [flags 0x41]  <function_decl 0x7f37dfe16a00 Error>) [0 S1 A8])
        (const_int 0 [0x0])) 646 {*call_0} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (nil)))))
;; End of basic block 32 -> ( 33)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 (fallthru)

;; Start of basic block ( 30 32 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  30
;; Pred edge  32 (fallthru)
;; Pred edge  31 [100.0%] 
(code_label 247 246 248 33 18 "" [2 uses])

(note 248 247 249 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 249 248 250 33 primos.c:68 (parallel [
            (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                (plus:DI (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34 (fallthru)

;; Start of basic block ( 33 24) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125

;; Pred edge  33 (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 250 249 251 34 14 "" [1 uses])

(note 251 250 253 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 253 251 254 34 primos.c:68 (set (reg:DI 0 ax [125])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 254 253 255 34 primos.c:68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [125])
            (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 hasta+0 S8 A64]))) 2 {cmpdi_1_insn_rex64} (nil))

(jump_insn 255 254 256 34 primos.c:68 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 252)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 34 -> ( 25 35)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  25
;; Succ edge  35 (fallthru)

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90

;; Pred edge  34 (fallthru)
(note 256 255 257 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 257 256 258 35 primos.c:94 (set (reg:SI 0 ax [orig:90 D.3802 ] [90])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90


;; Succ edge  36 (fallthru)

;; Start of basic block ( 35 8) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 0 [ax] 103

;; Pred edge  35 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 258 257 259 36 6 "" [1 uses])

(note 259 258 270 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 270 259 282 36 primos.c:95 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 36 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 282 270 0 NOTE_INSN_DELETED)


;; Function esPrimo (esPrimo)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    r71: preferred GENERAL_REGS, alternative NO_REGS
    a3 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred AREG, alternative GENERAL_REGS
    a6 (r70,l0) best AREG, cover GENERAL_REGS
    r69: preferred DREG, alternative GENERAL_REGS
    a5 (r69,l0) best DREG, cover GENERAL_REGS
    r68: preferred DREG, alternative GENERAL_REGS
    a8 (r68,l0) best DREG, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS
    a13 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred AREG, alternative GENERAL_REGS
    a0 (r66,l0) best AREG, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS
    a12 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS
    a11 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS
    a10 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS
    a9 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS
    a7 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS
    a4 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS
    a2 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS
    r58: preferred GENERAL_REGS, alternative NO_REGS
    a1 (r58,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r66,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r58,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a5(r69,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r70,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 MEM:4
  a7(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r68,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a10(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a11(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a13(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 52(l0): point = 0
   Insn 46(l0): point = 2
   Insn 42(l0): point = 4
   Insn 41(l0): point = 6
   Insn 38(l0): point = 9
   Insn 37(l0): point = 11
   Insn 34(l0): point = 14
   Insn 33(l0): point = 16
   Insn 32(l0): point = 18
   Insn 31(l0): point = 20
   Insn 28(l0): point = 23
   Insn 25(l0): point = 26
   Insn 23(l0): point = 29
   Insn 22(l0): point = 31
   Insn 21(l0): point = 33
   Insn 20(l0): point = 35
   Insn 19(l0): point = 41
   Insn 18(l0): point = 43
   Insn 17(l0): point = 45
   Insn 16(l0): point = 47
   Insn 15(l0): point = 49
   Insn 14(l0): point = 51
   Insn 13(l0): point = 53
   Insn 56(l0): point = 56
   Insn 9(l0): point = 58
   Insn 8(l0): point = 60
   Insn 4(l0): point = 62
   Insn 3(l0): point = 64
   Insn 2(l0): point = 66
 a0(r66): [3..4]
 a1(r58): [5..6]
 a2(r59): [17..18]
 a3(r71): [19..20]
 a4(r60): [32..33]
 a5(r69): [39..39] [37..37] [34..35]
 a6(r70): [35..36]
 a7(r61): [36..43]
 a8(r68): [40..41] [38..38]
 a9(r62): [44..45]
 a10(r63): [46..47]
 a11(r64): [48..49]
 a12(r65): [50..51]
 a13(r67): [52..53]
Compressing live ranges: from 69 to 29 - 42%
Ranges after the compression:
 a0(r66): [0..1]
 a1(r58): [2..3]
 a2(r59): [4..5]
 a3(r71): [6..7]
 a4(r60): [8..9]
 a5(r69): [15..15] [13..13] [10..11]
 a6(r70): [11..12]
 a7(r61): [12..18]
 a8(r68): [16..17] [14..14]
 a9(r62): [19..20]
 a10(r63): [21..22]
 a11(r64): [23..24]
 a12(r65): [25..26]
 a13(r67): [27..28]
  regions=2, blocks=9, points=29
    allocnos=14, copies=0, conflicts=0, ranges=17
Disposition:
    1:r58  l0     0    2:r59  l0     0    4:r60  l0     0    7:r61  l0     2
    9:r62  l0     0   10:r63  l0     0   11:r64  l0     0   12:r65  l0     0
    0:r66  l0     0   13:r67  l0     0    8:r68  l0     0    5:r69  l0     1
    6:r70  l0     0    3:r71  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 4, 7, dead_or_set: 5
insn=3, live_throughout: 1, 7, dead_or_set: 4
insn=4, live_throughout: 7, dead_or_set: 1
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=56, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 67
insn=14, live_throughout: 7, dead_or_set: 65, 67
insn=15, live_throughout: 7, dead_or_set: 64, 65
insn=16, live_throughout: 7, dead_or_set: 63, 64
insn=17, live_throughout: 7, dead_or_set: 62, 63
insn=18, live_throughout: 7, dead_or_set: 61, 62
insn=19, live_throughout: 7, 61, dead_or_set: 68
insn=20, live_throughout: 7, dead_or_set: 61, 68, 69, 70
insn=21, live_throughout: 7, dead_or_set: 60, 69
insn=22, live_throughout: 7, dead_or_set: 60
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 
insn=31, live_throughout: 7, dead_or_set: 71
insn=32, live_throughout: 7, dead_or_set: 59, 71
insn=33, live_throughout: 7, dead_or_set: 59
insn=34, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=38, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 58
insn=42, live_throughout: 7, dead_or_set: 58, 66
insn=46, live_throughout: 7, dead_or_set: 0, 66
insn=52, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 41
changing reg in insn 42
changing reg in insn 32
changing reg in insn 33
changing reg in insn 21
changing reg in insn 22
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 42
changing reg in insn 46
changing reg in insn 13
changing reg in insn 14
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
deleting insn with uid = 42.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns


esPrimo

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 39 [r10]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={12d,12u} r1={2d,2u} r2={2d,2u} r4={1d,1u} r5={1d,1u} r6={1d,23u} r7={1d,8u} r17={8d,3u} r20={1d,1u,1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r39={1d} 
;;    total ref usage 94{40d,53u,1e} in 27{27 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  ENTRY (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 primos.c:99 (set (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 num+0 S8 A64])
        (reg:DI 5 di [ num ])) 89 {*movdi_1_rex64} (nil))

(insn 3 2 4 2 primos.c:99 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) 47 {*movsi_1} (nil))

(insn 4 3 5 2 primos.c:99 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 array+0 S8 A64])
        (reg:DI 1 dx [ array ])) 89 {*movdi_1_rex64} (nil))

(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 5 9 2 primos.c:103 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(insn 9 8 56 2 primos.c:104 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0x0])) 47 {*movsi_1} (nil))

(jump_insn 56 9 57 2 primos.c:104 (set (pc)
        (label_ref 29)) 638 {jump} (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 57 56 36)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64 65 67 68 69 70

;; Pred edge  7
(code_label 36 57 12 3 25 "" [1 uses])

(note 12 36 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 3 primos.c:106 (set (reg:SI 0 ax [67])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 14 13 15 3 primos.c:106 (set (reg:DI 0 ax [orig:65 D.3872 ] [65])
        (sign_extend:DI (reg:SI 0 ax [67]))) 127 {extendsidi2_rex64} (nil))

(insn 15 14 16 3 primos.c:106 (parallel [
            (set (reg:DI 0 ax [orig:64 D.3873 ] [64])
                (ashift:DI (reg:DI 0 ax [orig:65 D.3872 ] [65])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 491 {*ashldi3_1_rex64} (nil))

(insn 16 15 17 3 primos.c:106 (parallel [
            (set (reg/f:DI 0 ax [orig:63 D.3874 ] [63])
                (plus:DI (reg:DI 0 ax [orig:64 D.3873 ] [64])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 array+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) 281 {*adddi_1_rex64} (nil))

(insn 17 16 18 3 primos.c:106 (set (reg/f:DI 0 ax [orig:62 D.3875 ] [62])
        (mem/f:DI (reg/f:DI 0 ax [orig:63 D.3874 ] [63]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 18 17 19 3 primos.c:106 (set (reg:DI 2 cx [orig:61 D.3876 ] [61])
        (mem:DI (reg/f:DI 0 ax [orig:62 D.3875 ] [62]) [0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 19 18 20 3 primos.c:106 (set (reg:DI 0 ax [68])
        (mem/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 num+0 S8 A64])) 89 {*movdi_1_rex64} (nil))

(insn 20 19 21 3 primos.c:106 (parallel [
            (set (reg:DI 0 ax [70])
                (div:DI (reg:DI 0 ax [68])
                    (reg:DI 2 cx [orig:61 D.3876 ] [61])))
            (set (reg:DI 1 dx [69])
                (mod:DI (reg:DI 0 ax [68])
                    (reg:DI 2 cx [orig:61 D.3876 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) 352 {*divmoddi4_nocltd_rex64} (nil))

(insn 21 20 22 3 primos.c:106 (set (reg:DI 0 ax [orig:60 D.3877 ] [60])
        (reg:DI 1 dx [69])) 89 {*movdi_1_rex64} (nil))

(insn 22 21 23 3 primos.c:106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:60 D.3877 ] [60])
            (const_int 0 [0x0]))) 0 {cmpdi_ccno_1_rex64} (nil))

(jump_insn 23 22 24 3 primos.c:106 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 26)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3 (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 primos.c:108 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])
        (const_int 1 [0x1])) 47 {*movsi_1} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 26 25 27 5 23 "" [1 uses])

(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 5 primos.c:104 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 286 {*addsi_1} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 71

;; Pred edge  5 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 29 28 30 6 22 "" [1 uses])

(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 6 primos.c:104 (set (reg:SI 0 ax [71])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) 47 {*movsi_1} (nil))

(insn 32 31 33 6 primos.c:104 (parallel [
            (set (reg:SI 0 ax [orig:59 D.3880 ] [59])
                (plus:SI (reg:SI 0 ax [71])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 286 {*addsi_1} (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 33 32 34 6 primos.c:104 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:59 D.3880 ] [59])
            (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 34 33 35 6 primos.c:104 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  6 (fallthru)
(note 35 34 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 38 7 primos.c:104 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (const_int 1 [0x1]))) 5 {*cmpsi_1_insn} (nil))

(jump_insn 38 37 39 7 primos.c:104 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 617 {*jcc_1} (nil))
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  8 (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 58 66

;; Pred edge  6
;; Pred edge  7 (fallthru)
(code_label 39 38 40 8 24 "" [1 uses])

(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 52 8 primos.c:111 (set (reg:SI 0 ax [orig:58 D.3882 ] [58])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 resultado+0 S4 A64])) 47 {*movsi_1} (nil))

(insn 52 41 58 8 primos.c:112 (use (reg/i:SI 0 ax)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 58 52 0 NOTE_INSN_DELETED)

